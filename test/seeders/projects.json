[
	{
		"id" : 1,
		"user_id" : 1,
		"name" : "Purple Thunder Effect",
		"description" : "This demo creates a full-screen WebGL animation using fragment shaders. It visualizes abstract, animated noise patterns in real time. Let's walk through the key components.\n\n---\n\n### üé® Canvas Setup\n\n```javascript\nvar cn = document.querySelector('canvas'),\n    gl = cn.getContext('experimental-webgl');\n```\n\n* `canvas`: A fullscreen HTML5 drawing surface.\n* `gl`: The WebGL context that enables GPU-accelerated rendering.\n\n---\n\n### üìê Responsive Viewport\n\n```javascript\nwindow.onresize = () => {\n    cw = cn.width  = window.innerWidth;\n    ch = cn.height = window.innerHeight;\n    gl.viewport(0, 0, cw, ch);\n};\nonresize();\n```\n\n* Dynamically resizes the canvas to fit the window.\n* Updates WebGL‚Äôs internal resolution to match.\n\n---\n\n### üõ†Ô∏è Shader Compilation\n\n```javascript\nfunction compileShader(gl, source, type) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    ...\n}\n```\n\n* Converts raw GLSL (shader) code into GPU-executable programs.\n* Handles compile errors gracefully.\n\n---\n\n### üßÆ Vertex Shader (Positioning Geometry)\n\n```glsl\nattribute vec3 avp;\nvoid main() {\n    gl_Position = vec4(avp, 1.0);\n}\n```\n\n* A minimal shader that outputs vertex positions directly to the screen.\n\n---\n\n### üß± Geometry Setup (Two Triangles)\n\n```javascript\ngl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n    -1.0, -1.0,\n     1.0, -1.0,\n    -1.0,  1.0,\n    -1.0,  1.0,\n     1.0, -1.0,\n     1.0,  1.0\n]), gl.STATIC_DRAW);\n```\n\n* Defines two triangles covering the screen.\n* Every pixel fragment will be processed.\n\n---\n\n### üåÄ Fragment Shader (Visual Effect)\n\n```glsl\nprecision highp float;\nuniform float uTime;\nuniform vec2 uResolution;\n...\nvoid main() {\n    vec2 p = gl_FragCoord.xy / uResolution.xy - 0.5;\n    ...\n    gl_FragColor = vec4(vec3(.4, .3, .7) / rz, 1.0);\n}\n```\n\n* `uTime`: Tracks animation time.\n* `uResolution`: The screen size.\n* `fbm(p)`: Fractal Brownian Motion (layered noise).\n* `circ(p)`: Adds circular modulation.\n* Final color: Animated purple shades based on noise.\n\n---\n\n### üîÅ Animation Loop\n\n```javascript\nfunction render() {\n    gl.uniform1f(timeLocation, Date.now() - st);\n    gl.uniform2fv(resolutionLocation, [cw, ch]);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    window.requestAnimationFrame(render);\n}\nrender();\n```\n\n* Updates the `uTime` and `uResolution` uniforms each frame.\n* Triggers shader execution.\n* Uses `requestAnimationFrame` for smooth 60fps updates.\n\n---\n\n### üßæ Summary\n\nThis shader demo showcases:\n\n* Real-time procedural graphics using only JavaScript and GLSL\n* Fully GPU-powered rendering\n* Fractal noise patterns and circular transformations\n* Minimal CPU load with elegant WebGL rendering\n\n---\n\n> üìù **Text Styling Demo**: This block uses standard HTML elements with clear formatting for code, headings, and lists. It's a great way to demonstrate how your site presents structured, readable technical content.\n\nWould you like me to export this as HTML or Markdown for direct use on your site?",
		"javascript" : "const a = \"import\";\nvar cn = document.querySelector('canvas'),\n    gl = cn.getContext('experimental-webgl'),\n    cw, ch, st = Date.now();\n\nwindow.onresize = () => {\n    cw = cn.width  = window.innerWidth;\n    ch = cn.height = window.innerHeight;\n    gl.viewport(0, 0, cw, ch);\n};  \nonresize();\n\nconst fragmentShader = compileShader(gl, cn.textContent, gl.FRAGMENT_SHADER);\nconst vertexShader = compileShader(gl, `attribute vec3 avp;void main(){gl_Position = vec4(avp, 1.0);}`, gl.VERTEX_SHADER); \nconst program = gl.createProgram();\n\ngl.attachShader(program, vertexShader);\ngl.attachShader(program, fragmentShader);    \ngl.linkProgram(program);\ngl.useProgram(program);\n\nconst resolutionLocation = gl.getUniformLocation(program, 'uResolution');\nconst timeLocation = gl.getUniformLocation(program, 'uTime');    \nconst vertexPositionLocation = gl.getAttribLocation(program, 'avp');\n\ngl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\ngl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0]), gl.STATIC_DRAW);\ngl.enableVertexAttribArray(vertexPositionLocation);\ngl.vertexAttribPointer(vertexPositionLocation, 2, gl.FLOAT, false, 0, 0);\n\nrender();\n\n\nfunction compileShader(gl, source, type) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error(gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n        return null;\n    }\n    return shader;\n}\n\nfunction render() {\n    gl.uniform1f(timeLocation, Date.now() - st);\n    gl.uniform2fv(resolutionLocation, [cw, ch]);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    window.requestAnimationFrame(render);\n}",
		"css" : "body {\n  margin: 0;\n  height: 100vh;\n}\ncanvas {\n  display: block;\n  width: 100%;\n  height: 100%;\n}",
		"html" : "<canvas>\n    precision highp float;\n    const float pi = 3.14159265359;\n    uniform float uTime;\n    uniform vec2 uResolution;\n\n    float rand(float seed) {\n        return fract(sin(seed) * 10000.);\n    }\n    float noise(vec2 p) {\n        return rand(p.x * 14. + p.y * sin(uTime / 1500000.) * .005);\n    }\n    float smoothNoise(vec2 p){\n        vec2 inter = smoothstep(0., 1., fract(p));\n        float s = mix(noise(vec2(floor(p.x), floor(p.y))), noise(vec2(ceil(p.x), floor(p.y))), inter.x);\n        float n = mix(noise(vec2(floor(p.x), ceil(p.y))), noise(vec2(ceil(p.x), ceil(p.y))), inter.x);\n        return mix(s, n, inter.y);\n    }\n    float fbm(in vec2 p) {\n        float z = 2.;\n        float rz = 0.;\n        for (float i = 1.; i < 6.; i++) {\n            rz += abs((smoothNoise(p) - .5) * 2.) / z;\n            z *= 2.;\n            p *= 2.;\n        }\n        return rz;\n    }\n\n    float circ(vec2 p){\n        float r = length(p);\n        r = log(sqrt(r));\n        return abs(mod(4.*r, pi*2.) - pi) * 3. + .2;\n    }\n\n    void main() {\n        vec2 p = gl_FragCoord.xy / uResolution.xy - 0.5;\n        p.x *= uResolution.x / uResolution.y;\n        float rz = fbm(p * 5.);\n        rz *= circ(p / exp(mod(uTime / 500., pi)));\n        gl_FragColor = vec4(vec3(.4, .3, .7) / rz, 1.);\n    }        \n</canvas>",
		"created_at" : "2025-05-17 15:36:31",
		"updated_at" : "2025-05-23 01:54:25",
		"slug" : "603590",
		"photo" : "photos/6828c7c80d372.jpeg"
	},
	{
		"id" : 2,
		"user_id" : 1,
		"name" : "GSAP √ó SplitText Text Animation",
		"description" : "This project uses [GSAP (GreenSock Animation Platform)](https://gsap.com/) and its plugin [SplitText](https://gsap.com/docs/v3/Plugins/SplitText/) to create an engaging, looping animation on a block of text.\n\n## üîß What It Does\n\n* Splits the entire `body` text into **individual characters**.\n* Animates each character with a **wave-like effect**, changing:\n\n  * `font-weight`\n  * `color`\n  * `scale`\n  * `vertical position (y)`\n  * `rotation`\n* The animation **repeats infinitely**, bouncing with `yoyo` behavior.\n\n---\n\n## üß© Code Breakdown\n\n### 1. **Split Text Into Characters**\n\n```js\nconst mySplitText = new SplitText('body', {\n  type: \"chars\",         // Split by characters\n  position: \"relative\"   // Positioning for animation\n});\n```\n\n### 2. **Create Animation Timeline with GSAP**\n\n```js\nsetTimeout(() => {\n  gsap.timeline({\n    yoyo: true,\n    repeat: -1,          // Infinite loop\n    repeatDelay: 0.5,    // Pause between loops\n    delay: 1             // Initial delay\n  })\n  .to(mySplitText.chars, {\n    duration: 0.2,\n    fontWeight: 900,\n    color: '#146EF5',\n    scale: 0.7,\n    y: 6,\n    ease: 'power2.in',\n    rotation: '360deg',\n    stagger: {\n      grid: [14, 14],     // Simulate a 14x14 character grid\n      amount: 0.8,\n      from: 'center'\n    }\n  })\n  .to(mySplitText.chars, {\n    duration: 0.4,\n    fontWeight: 200,\n    color: '#fff',\n    scale: 1,\n    y: 0,\n    rotation: '720deg',\n    ease: 'power3.inOut',\n    stagger: {\n      grid: [14, 14],\n      amount: 0.8,\n      from: 'center'\n    }\n  }, '-=0.3'); // Overlap start with previous tween\n}, 500);\n```\n\n---\n\n## üé® CSS Styling\n\n### Fonts\n\n```css\n@font-face {\n  font-family: \"LeagueSpartanVariable\";\n  src: url(\"LeagueSpartanVariable.ttf\");\n  font-weight: 200 900;\n}\n\n@font-face {\n  font-family: 'Anybody';\n  src: url('ETCAnybodyPB.woff2') format('woff2-variations');\n  font-weight: 200 900;\n  font-stretch: 10% 400%;\n}\n```\n\n### Body Styling\n\n```css\nbody {\n  background: #111;\n  color: #fff;\n  font-size: 30px;\n  font-family: 'LeagueSpartanVariable', Courier, monospace;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-content: center;\n  height: 100vh;\n  width: 370px;\n  margin: auto;\n  line-height: 15px;\n}\n```\n\n### Each Character\n\n```css\ndiv {\n  width: 25px;\n  height: 25px;\n  text-align: center;\n  font-weight: 200;\n}\n```\n\n---\n\n## üì¶ Libraries Used\n\n```html\n<script src='https://unpkg.com/gsap@3/dist/gsap.min.js'></script>\n<script src='https://unpkg.com/gsap@3/dist/SplitText.min.js'></script>\n```\n\n---\n\n## üìù Summary\n\nThis animation gives text a dynamic and responsive effect by:\n\n* Leveraging **GSAP's powerful timelines and easings**\n* Using **SplitText** to target individual characters\n* Styling with modern variable fonts for weight transitions\n\nIdeal for **creative headers**, **interactive text**, or just showing off cool front-end animations.\n\n---",
		"javascript" : "const mySplitText = new SplitText('body', {type:\"chars\", position: \"relative\" }); \n// gsap.to(mySplitText.chars, {fontWeight: 900, duration: 5})\nsetTimeout(() => {\n  gsap.timeline({ yoyo: true, repeat: -1, repeatDelay: 0.5, delay: 1})\n    .to(mySplitText.chars, { \n      duration: .2,\n      fontWeight: 900, \n      color: '#146EF5', \n      scale:.7,\n      y: 6,\n      ease: 'power2.in',\n      rotation: '360deg',\n      stagger:{ \n        grid: [14,14], \n        amount: .8, \n        from: 'center',\n      } \n    })\n    .to(mySplitText.chars, { \n      duration: .4,\n      fontWeight: 200,  \n      color: '#fff',\n      scale: 1,\n      y: 0,\n      rotation: '720deg',\n      ease: 'power3.inOut',\n      stagger:{ \n        grid: [14,14], \n        amount: .8, \n        from: 'center'\n      } \n    }, '-=.3')\n}, 500)",
		"css" : "@font-face {\n  font-family: \"LeagueSpartanVariable\";\n  src: url(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/2101521/LeagueSpartanVariable.ttf\");\n\n  font-weight: 200 900;\n}\n\n@font-face {\n\tfont-family: 'Anybody';\n\tsrc: url('https://s3-us-west-2.amazonaws.com/s.cdpn.io/61488/ETCAnybodyPB.woff2') format('woff2-variations');\n\tfont-display: block;\n\tfont-weight: 200 900;\n\tfont-stretch: 10% 400%;\n}\n\nbody {\n  height: 100vh;\n  width: 370px;\n  left: 0;\n  right: 0;\n  margin: auto;\n  background: #111;\n  color: #fff;\n  line-height: 15px;\n  font-size: 30px;\n  font-family: 'LeagueSpartanVariable', Courier, monospace;\n  display: flex;\n  flex-wrap: wrap;\n  align-content: center;\n  justify-content: center;\n  \n}\n\ndiv {\n  width: 25px;\n  height: 25px;\n  text-align: center;\n  // font-variation-settings: \"wght\" var(--wt);\n  font-weight: 200;\n}",
		"html" : "GSAP &times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXTGSAP&times;SPLITTEXT\n        <script src='https://unpkg.com/gsap@3/dist/gsap.min.js'></script>\n        <script src='https://unpkg.com/gsap@3/dist/SplitText.min.js'></script>",
		"created_at" : "2025-05-17 16:15:03",
		"updated_at" : "2025-05-23 02:01:44",
		"slug" : "54",
		"photo" : "photos/6828b6074a337.jpeg"
	},
	{
		"id" : 3,
		"user_id" : 1,
		"name" : "WebGL",
		"description" : "This is an interactive WebGL shader playground. It:\n\n* Displays a fragment shader running on a fullscreen WebGL canvas.\n* Allows live editing of the shader source.\n* Provides resolution toggling (full/half res).\n* Saves shader code to local storage.\n* Offers real-time pointer (mouse/touch) interaction.\n* Includes a custom editor UI with syntax feedback and error indication.\n\n---\n\n### üîß **Key Features**\n\n#### 1. **Renderer**\n\n* Uses WebGL2 to compile and render GLSL shaders.\n* Passes uniforms like `time`, `resolution`, `move`, `touch`, and `pointers` to shaders.\n* Handles shader compilation and linking, including error catching.\n\n#### 2. **Editor**\n\n* Custom-built text editor in a `<textarea>` with:\n\n  * Tab/shift-tab indentation.\n  * Smart newline indentation.\n  * Error display with arrow indicators pointing to the relevant line.\n\n#### 3. **PointerHandler**\n\n* Tracks multiple pointers (touch/mouse).\n* Maps pointer coordinates to canvas space.\n* Passes movement data to the renderer.\n\n#### 4. **Store**\n\n* Manages saving/loading shaders to `localStorage`.\n* Supports listing and cleaning up saved shader snippets.\n\n#### 5. **UI Controls**\n\n* Buttons to:\n\n  * Toggle editor view.\n  * Reset shader to default.\n  * Switch rendering resolution.\n\n#### 6. **Responsive Design**\n\n* Scales canvas resolution using `devicePixelRatio` and custom `resolution` toggle.\n* Resizes on window changes.\n\n---\n\n### üß™ **Live Shader Example**\n\nThe default fragment shader outputs a gradient based on fragment position and `time`:\n\n```glsl\n#version 300 es\nprecision highp float;\nout vec4 O;\nuniform float time;\nuniform vec2 resolution;\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / resolution;\n  O = vec4(uv, sin(time) * 0.5 + 0.5, 1.0);\n}\n```\n\nYou can change this live in the editor and it re-renders after `renderDelay`.\n\n---\n\n### üßº Suggestions\n\nIf you're looking to expand or improve this:\n\n* **Add syntax highlighting** with something like CodeMirror or Monaco.\n* **Support texture uniforms** (e.g., load an image).\n* **Enhance error messages** with more helpful hints or highlighting.\n* **Allow vertex shader editing** as well, not just the fragment shader.\n* **Export/import shader files**.\n* **Shareable links** via encoded shader source in the URL.",
		"javascript" : "/*********\n * made by Matthias Hurrle (@atzedent)\n */\nlet editMode = false /*// set to false to hide the code editor on load*/\nlet resolution = 1 /*// set 1 for full resolution or to .5 to start with half resolution on load*/\nlet renderDelay = 1000 /*// delay in ms before rendering the shader after a change*/\nlet dpr = Math.max(1, resolution * window.devicePixelRatio)\nlet frm, source, editor, store, renderer, pointers\nconst shaderId = 'XJJGbya'\nwindow.onload = init\n\nfunction resize() {\n  const { innerWidth: width, innerHeight: height } = window\n\n  canvas.width = width * dpr\n  canvas.height = height * dpr\n\n  if (renderer) {\n    renderer.updateScale(dpr)\n  }\n}\nfunction toggleView() {\n  editor.hidden = btnToggleView.checked\n}\nfunction reset() {\n  let shader = source\n  editor.text = shader ? shader.textContent : renderer.defaultSource\n  store.putShaderSource(shaderId, editor.text)\n  renderThis()\n}\nfunction toggleResolution() {\n  resolution = btnToggleResolution.checked ? .5 : 1\n  dpr = Math.max(1, resolution * window.devicePixelRatio)\n  pointers.updateScale(dpr)\n  resize()\n}\nfunction loop(now) {\n  renderer.updateMouse(pointers.first)\n  renderer.updatePointerCount(pointers.count)\n  renderer.updatePointerCoords(pointers.coords)\n  renderer.updateMove(pointers.move)\n  renderer.render(now)\n  frm = requestAnimationFrame(loop)\n}\nfunction renderThis() {\n  editor.clearError()\n  store.putShaderSource(shaderId, editor.text)\n\n  const result = renderer.test(editor.text)\n\n  if (result) {\n    editor.setError(result)\n  } else {\n    renderer.updateShader(editor.text)\n  }\n  cancelAnimationFrame(frm) /*// Always cancel the previous frame!*/\n  loop(0)\n}\nconst debounce = (fn, delay) => {\n  let timerId\n  return (...args) => {\n    clearTimeout(timerId)\n    timerId = setTimeout(() => fn.apply(this, args), delay)\n  }\n}\nconst render = debounce(renderThis, renderDelay)\nfunction init() {\n  source = document.querySelector(\"script[type='x-shader/x-fragment']\")\n\n  document.title = \"Something Really Soft\"\n\n  renderer = new Renderer(canvas, dpr)\n  pointers = new PointerHandler(canvas, dpr)\n  store    = new Store(window.location)\n  editor   = new Editor(codeEditor, error, indicator)\n  editor.text = source.textContent\n  renderer.setup()\n  renderer.init()\n\n  if (!editMode) {\n    btnToggleView.checked = true\n    toggleView()\n  }\n  if (resolution === .5) {\n    btnToggleResolution.checked = true\n    toggleResolution()\n  }\n  canvas.addEventListener('shader-error', e => editor.setError(e.detail))\n\n  resize()\n\n  if (renderer.test(source.textContent) === null) {\n    renderer.updateShader(source.textContent)\n  }\n  loop(0)\n  window.onresize = resize\n  window.addEventListener(\"keydown\", e => {\n    if (e.key === \"L\" && e.ctrlKey) {\n      e.preventDefault()\n      btnToggleView.checked = !btnToggleView.checked\n      toggleView()\n    }\n  })\n}\nclass Renderer {\n  #vertexSrc = \"#version 300 es\\nprecision highp float;\\nin vec4 position;\\nvoid main(){gl_Position=position;}\"\n  #fragmtSrc = \"#version 300 es\\nprecision highp float;\\nout vec4 O;\\nuniform float time;\\nuniform vec2 resolution;\\nvoid main() {\\n\\tvec2 uv=gl_FragCoord.xy/resolution;\\n\\tO=vec4(uv,sin(time)*.5+.5,1);\\n}\"\n  #vertices = [-1, 1, -1, -1, 1, 1, 1, -1]\n  constructor(canvas, scale) {\n    this.canvas = canvas\n    this.scale = scale\n    this.gl = canvas.getContext(\"webgl2\")\n    this.gl.viewport(0, 0, canvas.width * scale, canvas.height * scale)\n    this.shaderSource = this.#fragmtSrc\n    this.mouseMove = [0, 0]\n    this.mouseCoords = [0, 0]\n    this.pointerCoords = [0, 0]\n    this.nbrOfPointers = 0\n  }\n  get defaultSource() { return this.#fragmtSrc }\n  updateShader(source) {\n    this.reset()\n    this.shaderSource = source\n    this.setup()\n    this.init()\n  }\n  updateMove(deltas) {\n    this.mouseMove = deltas\n  }\n  updateMouse(coords) {\n    this.mouseCoords = coords\n  }\n  updatePointerCoords(coords) {\n    this.pointerCoords = coords\n  }\n  updatePointerCount(nbr) {\n    this.nbrOfPointers = nbr\n  }\n  updateScale(scale) {\n    this.scale = scale\n    this.gl.viewport(0, 0, this.canvas.width * scale, this.canvas.height * scale)\n  }\n  compile(shader, source) {\n    const gl = this.gl\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.error(gl.getShaderInfoLog(shader))\n      this.canvas.dispatchEvent(new CustomEvent('shader-error', { detail: gl.getShaderInfoLog(shader) }))\n    }\n  }\n  test(source) {\n    let result = null\n    const gl = this.gl\n    const shader = gl.createShader(gl.FRAGMENT_SHADER)\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      result = gl.getShaderInfoLog(shader)\n    }\n    if (gl.getShaderParameter(shader, gl.DELETE_STATUS)) {\n      gl.deleteShader(shader)\n    }\n    return result\n  }\n  reset() {\n    const { gl, program, vs, fs } = this\n    if (!program || gl.getProgramParameter(program, gl.DELETE_STATUS)) return\n    if (gl.getShaderParameter(vs, gl.DELETE_STATUS)) {\n      gl.detachShader(program, vs)\n      gl.deleteShader(vs)\n    }\n    if (gl.getShaderParameter(fs, gl.DELETE_STATUS)) {\n      gl.detachShader(program, fs)\n      gl.deleteShader(fs)\n    }\n    gl.deleteProgram(program)\n  }\n  setup() {\n    const gl = this.gl\n    this.vs = gl.createShader(gl.VERTEX_SHADER)\n    this.fs = gl.createShader(gl.FRAGMENT_SHADER)\n    this.compile(this.vs, this.#vertexSrc)\n    this.compile(this.fs, this.shaderSource)\n    this.program = gl.createProgram()\n    gl.attachShader(this.program, this.vs)\n    gl.attachShader(this.program, this.fs)\n    gl.linkProgram(this.program)\n\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n      console.error(gl.getProgramInfoLog(this.program))\n    }\n  }\n  init() {\n    const { gl, program } = this\n    this.buffer = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.#vertices), gl.STATIC_DRAW)\n\n    const position = gl.getAttribLocation(program, \"position\")\n\n    gl.enableVertexAttribArray(position)\n    gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0)\n\n    program.resolution = gl.getUniformLocation(program, \"resolution\")\n    program.time = gl.getUniformLocation(program, \"time\")\n    program.move = gl.getUniformLocation(program, \"move\")\n    program.touch = gl.getUniformLocation(program, \"touch\")\n    program.pointerCount = gl.getUniformLocation(program, \"pointerCount\")\n    program.pointers = gl.getUniformLocation(program, \"pointers\")\n  }\n  render(now = 0) {\n    const { gl, program, buffer, canvas, mouseMove, mouseCoords, pointerCoords, nbrOfPointers } = this\n    \n    if (!program || gl.getProgramParameter(program, gl.DELETE_STATUS)) return\n\n    gl.clearColor(0, 0, 0, 1)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n    gl.useProgram(program)\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\n    gl.uniform2f(program.resolution, canvas.width, canvas.height)\n    gl.uniform1f(program.time, now * 1e-3)\n    gl.uniform2f(program.move, ...mouseMove)\n    gl.uniform2f(program.touch, ...mouseCoords)\n    gl.uniform1i(program.pointerCount, nbrOfPointers)\n    gl.uniform2fv(program.pointers, pointerCoords)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n}\nclass Store {\n  constructor(key) {\n    this.key = key\n    this.store = window.localStorage\n  }\n  #ownShadersKey = 'ownShaders'\n  #StorageType = Object.freeze({\n    shader: 'fragmentSource',\n    config: 'config'\n  })\n  #getKeyPrefix(type) {\n    return `${type}${btoa(this.key)}`\n  }\n  #getKey(type, name) {\n    return `${this.#getKeyPrefix(type)}${btoa(name)}`\n  }\n  putShaderSource(name, source) {\n    const storageType = this.#StorageType.shader\n    this.store.setItem(this.#getKey(storageType, name), source)\n  }\n  getShaderSource(name) {\n    const storageType = this.#StorageType.shader\n    return this.store.getItem(this.#getKey(storageType, name))\n  }\n  deleteShaderSource(name) {\n    const storageType = this.#StorageType.shader\n    this.store.removeItem(this.#getKey(storageType, name))\n  }\n  /** @returns {{title:string, uuid:string}[]} */\n  getOwnShaders() {\n    const storageType = this.#StorageType.config\n    const result = this.store.getItem(this.#getKey(storageType, this.#ownShadersKey))\n    \n    return result ? JSON.parse(result) : []\n  }\n  /** @param {{title:string, uuid:string}[]} shader */\n  putOwnShader(shader) {\n    const ownShaders = this.getOwnShaders()\n    const storageType = this.#StorageType.config\n    const index = ownShaders.findIndex((s) => s.uuid === shader.uuid)\n    if (index === -1) {\n      ownShaders.push(shader)\n    } else {\n      ownShaders[index] = shader\n    }\n    this.store.setItem(this.#getKey(storageType, this.#ownShadersKey), JSON.stringify(ownShaders))\n  }\n  deleteOwnShader(uuid) {\n    const ownShaders = this.getOwnShaders()\n    const storageType = this.#StorageType.config\n    this.store.setItem(this.#getKey(storageType, this.#ownShadersKey), JSON.stringify(ownShaders.filter((s) => s.uuid !== uuid) ))\n    this.deleteShaderSource(uuid)\n  }\n  /** @param {string[]} keep The names of the shaders to keep*/\n  cleanup(keep=[]) {\n    const storageType = this.#StorageType.shader\n    const ownShaders = this.getOwnShaders().map((s) => this.#getKey(storageType, s.uuid))\n    const premadeShaders = keep.map((name) => this.#getKey(storageType, name))\n    const keysToKeep = [...ownShaders, ...premadeShaders]\n    const result = []\n\n    for (let i = 0; i < this.store.length; i++) {\n      const key = this.store.key(i)\n\n      if (key.startsWith(this.#getKeyPrefix(this.#StorageType.shader)) && !keysToKeep.includes(key)) {\n        result.push(key)\n      }\n    }\n\n    result.forEach((key) => this.store.removeItem(key))\n  }\n}\nclass PointerHandler {\n  constructor(element, scale) {\n    this.scale = scale\n    this.active = false\n    this.pointers = new Map()\n    this.lastCoords = [0,0]\n    this.moves = [0,0]\n    const map = (element, scale, x, y) => [x * scale, element.height - y * scale]\n    element.addEventListener(\"pointerdown\", (e) => {\n      this.active = true\n      this.pointers.set(e.pointerId, map(element, this.getScale(), e.clientX, e.clientY))\n    })\n    element.addEventListener(\"pointerup\", (e) => {\n      if (this.count === 1) {\n        this.lastCoords = this.first\n      }\n      this.pointers.delete(e.pointerId)\n      this.active = this.pointers.size > 0\n    })\n    element.addEventListener(\"pointerleave\", (e) => {\n      if (this.count === 1) {\n        this.lastCoords = this.first\n      }\n      this.pointers.delete(e.pointerId)\n      this.active = this.pointers.size > 0\n    })\n    element.addEventListener(\"pointermove\", (e) => {\n      if (!this.active) return\n      this.lastCoords = [e.clientX, e.clientY]\n      this.pointers.set(e.pointerId, map(element, this.getScale(), e.clientX, e.clientY))\n      this.moves = [this.moves[0]+e.movementX, this.moves[1]+e.movementY]\n    })\n  }\n  getScale() {\n    return this.scale\n  }\n  updateScale(scale) { this.scale = scale }\n  reset() {\n    this.pointers.clear()\n    this.active = false\n    this.moves = [0,0]\n  }\n  get count() {\n    return this.pointers.size\n  }\n  get move() {\n    return this.moves\n  }\n  get coords() {\n    return this.pointers.size > 0 ? Array.from(this.pointers.values()).map((p) => [...p]).flat() : [0, 0]\n  }\n  get first() {\n    return this.pointers.values().next().value || this.lastCoords\n  }\n}\nclass Editor {\n  constructor(textarea, errorfield, errorindicator) {\n    this.textarea = textarea\n    this.errorfield = errorfield\n    this.errorindicator = errorindicator\n    textarea.addEventListener('keydown', this.handleKeydown.bind(this))\n    textarea.addEventListener('scroll', this.handleScroll.bind(this))\n  }\n  get hidden() { return this.textarea.classList.contains('hidden') }\n  set hidden(value) { value ? this.#hide() : this.#show() }\n  get text() { return this.textarea.value }\n  set text(value) { this.textarea.value = value }\n  get scrollTop() { return this.textarea.scrollTop }\n  set scrollTop(value) { this.textarea.scrollTop = value }\n  setError(message) {\n    this.errorfield.innerHTML = message\n    this.errorfield.classList.add('opaque')\n    const match = message.match(/ERROR: \\d+:(\\d+):/)\n    const lineNumber = match ? parseInt(match[1]) : 0\n    const overlay = document.createElement('pre')\n\n    overlay.classList.add('overlay')\n    overlay.textContent = '\\n'.repeat(lineNumber)\n\n    document.body.appendChild(overlay)\n\n    const offsetTop = parseInt(getComputedStyle(overlay).height)\n\n    this.errorindicator.style.setProperty('--top', offsetTop + 'px')\n    this.errorindicator.style.visibility = 'visible'\n\n    document.body.removeChild(overlay)\n  }\n  clearError() {\n    this.errorfield.textContent = ''\n    this.errorfield.classList.remove('opaque')\n    this.errorfield.blur()\n    this.errorindicator.style.visibility = 'hidden'\n  }\n  focus() {\n    this.textarea.focus()\n  }\n  #hide() {\n    for (const el of [this.errorindicator, this.errorfield, this.textarea]) {\n      el.classList.add('hidden')\n    }\n  }\n  #show() {\n    for (const el of [this.errorindicator, this.errorfield, this.textarea]) {\n      el.classList.remove('hidden')\n    }\n    this.focus()\n  }\n  handleScroll() {\n    this.errorindicator.style.setProperty('--scroll-top', `${this.textarea.scrollTop}px`)\n  }\n  handleKeydown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault()\n      this.handleTabKey(event.shiftKey)\n    } else if (event.key === \"Enter\") {\n      event.preventDefault()\n      this.handleEnterKey()\n    }\n  }\n  handleTabKey(shiftPressed) {\n    if (this.#getSelectedText() !== \"\") {\n      if (shiftPressed) {\n        this.#unindentSelectedText()\n        return\n      }\n      this.#indentSelectedText()\n    } else {\n      this.#indentAtCursor()\n    }\n  }\n  #getSelectedText() {\n    const editor = this.textarea\n    const start = editor.selectionStart\n    const end = editor.selectionEnd\n    return editor.value.substring(start, end)\n  }\n  #indentAtCursor() {\n    const editor = this.textarea\n    const cursorPos = editor.selectionStart\n\n    document.execCommand('insertText', false, '\\t')\n    editor.selectionStart = editor.selectionEnd = cursorPos + 1\n  }\n  #indentSelectedText() {\n    const editor = this.textarea\n    const cursorPos = editor.selectionStart\n    const selectedText = this.#getSelectedText()\n    const lines = selectedText.split('\\n')\n    const indentedText = lines.map(line => '\\t' + line).join('\\n')\n\n    document.execCommand('insertText', false, indentedText)\n    editor.selectionStart = cursorPos\n  }\n  #unindentSelectedText() {\n    const editor = this.textarea\n    const cursorPos = editor.selectionStart\n    const selectedText = this.#getSelectedText()\n    const lines = selectedText.split('\\n')\n    const indentedText = lines.map(line => line.replace(/^\\t/, '').replace(/^ /, '')).join('\\n')\n\n    document.execCommand('insertText', false, indentedText)\n    editor.selectionStart = cursorPos\n  }\n  handleEnterKey() {\n    const editor = this.textarea\n    const visibleTop = editor.scrollTop\n    const cursorPosition = editor.selectionStart\n\n    let start = cursorPosition - 1\n    while (start >= 0 && editor.value[start] !== '\\n') {\n      start--\n    }\n\n    let newLine = ''\n    while (start < cursorPosition - 1 && (editor.value[start + 1] === ' ' || editor.value[start + 1] === '\\t')) {\n      newLine += editor.value[start + 1]\n      start++\n    }\n\n    document.execCommand('insertText', false, '\\n' + newLine)\n    editor.selectionStart = editor.selectionEnd = cursorPosition + 1 + newLine.length\n    editor.scrollTop = visibleTop /*// Prevent the editor from scrolling*/\n    const lineHeight = editor.scrollHeight / editor.value.split('\\n').length\n    const line = editor.value.substring(0, cursorPosition).split('\\n').length\n\n    // Do the actual layout calculation in order to get the correct scroll position\n    const visibleBottom = editor.scrollTop + editor.clientHeight\n    const lineTop = lineHeight * (line - 1)\n    const lineBottom = lineHeight * (line + 2)\n\n    // If the cursor is outside the visible range, scroll the editor\n    if (lineTop < visibleTop) editor.scrollTop = lineTop\n    if (lineBottom > visibleBottom) editor.scrollTop = lineBottom - editor.clientHeight\n  }\n}",
		"css" : "::-webkit-scrollbar {\n  width: 0.625rem;\n  height: 0.625rem;\n}\n::-webkit-scrollbar-thumb {\n  background: #111;\n  border-radius: 0.3125rem;\n  box-shadow: inset 0.125rem 0.125rem 0.125rem rgba(255, 255, 255, 0.25),\n    inset -0.125rem -0.125rem 0.125rem rgba(0, 0, 0, 0.25);\n  cursor: default;\n}\n::-webkit-scrollbar-track {\n  background: #333;\n}\n::selection {\n  background: #fff;\n  color: #333;\n}\nhtml,\nbody {\n  height: 100vh;\n  height: 100dvh;\n  margin: 0;\n  overflow: hidden;\n}\nbody {\n  display: grid;\n  grid-template-rows: calc(100dvh - 4rem) 4rem;\n  font-family: system-ui, sans-serif;\n}\ncanvas,\n.editor,\n#controls {\n  grid-row: 1;\n  grid-column: 1;\n}\ncanvas {\n  width: 100%;\n  height: auto;\n  object-fit: contain;\n  background: black;\n  touch-action: none;\n  z-index: -1;\n}\n.editor,\n.overlay,\n#error {\n  font-family: 'Courier New', Courier, monospace;\n  background: repeating-linear-gradient(0deg, #000a, #1119, #000a .25rem);\n  padding: 1em;\n}\n.editor {\n  color: #fefefe;\n  tab-size: 2;\n  border: none;\n  resize: none;\n}\n.editor:focus {\n  outline: none;\n}\n#error {\n  grid-row: 2;\n  grid-column: 1;\n  margin: 0;\n  padding-block: 0;\n  padding-top: .5em;\n  color: firebrick;\n  overflow: auto;\n  text-wrap: pretty;\n}\n#indicator {\n  visibility: hidden;\n  position: absolute;\n  top: calc(var(--top, 0px) - var(--scroll-top, 0px));\n  width: 0;\n  height: 0;\n  border-top: 10px solid transparent;\n  border-bottom: 10px solid transparent;\n  border-left: 10px solid firebrick;\n  transform: translateY(-25%);\n}\n.overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  margin: 0;\n}\n.editor,\n.overlay {\n  font-size: 1rem;\n  line-height: 1.2;\n  white-space: pre;\n}\n#controls {\n  position: fixed;\n  top: 1em;\n  right: 2em;\n}\n.controls {\n  position: relative;\n  display: flex;\n  gap: 1.5em;\n  padding: .5em 1.25em;\n  background: #1111;\n  border-radius: 4px;\n}\n.controls::before,\n.controls::after {\n  content: '';\n  position: absolute;\n  z-index: -1;\n  inset: 0;\n  transform: scale(.95);\n  border-radius: inherit;\n  opacity: 0;\n}\n.controls::before {\n  background: #aef;\n  animation: pulse 2s infinite;\n}\n.controls::after {\n  background: #fefefe66;\n  transition: transform 200ms ease-in-out;\n}\n.controls:hover::before,\n.controls:hover::after {\n  opacity: 1;\n}\n.controls:hover::before {\n  transform: scale(.98);\n  filter: blur(2px);\n}\n.controls:hover::after {\n  transform: scale(1.025, 1.1);\n}\n.controls:hover {\n  background: #111f;\n}\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.0125);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n.hidden {\n  display: none !important;\n}\n.opaque {\n  opacity: 1 !important;\n  background: #111 !important;\n}\ninput {\n  all: unset;\n  opacity: .2;\n  filter: saturate(0) invert(1);\n  cursor: pointer;\n  transition: opacity 200ms ease-in-out;\n  padding: .25em .5em;\n}\ninput:hover {\n  opacity: 1;\n}\n.icon {\n  text-align: center;\n  line-height: 1;\n}\n#btnToggleView {\n  width: 1.25em;\n}\n#btnToggleView::after {\n  content: 'üëÅ';\n}\n#btnToggleView:checked::after {\n  content: '‚úèÔ∏è';\n}\n#btnToggleResolution::after {\n  content: '1Ô∏è‚É£';\n}\n#btnToggleResolution:checked::after {\n  content: '2Ô∏è‚É£';\n}\n#btnReset::after {\n  content: '‚èÆÔ∏è';\n}",
		"html" : "<canvas id=\"canvas\"></canvas>\n<textarea id=\"codeEditor\" class=\"editor\" spellcheck=\"false\" autocorrect=\"off\" autocapitalize=\"off\" translate=\"no\" oninput=\"render()\"></textarea>\n<pre id=\"error\"></pre>\n<div id=\"indicator\"></div>\n<div id=\"controls\">\n  <div class=\"controls\">\n    <input id=\"btnToggleView\" class=\"icon\" type=\"checkbox\" name=\"toggleView\" onclick=\"toggleView()\">\n    <input id=\"btnToggleResolution\" class=\"icon\" type=\"checkbox\" name=\"toggleResolution\" onchange=\"toggleResolution()\">\n    <input id=\"btnReset\" class=\"icon\" type=\"checkbox\" name=\"reset\" onclick=\"reset()\">\n  </div>\n</div>\n<script type=\"x-shader/x-fragment\">#version 300 es\n/*********\n* made by Matthias Hurrle (@atzedent)\n*/\nprecision highp float;\nout vec4 O;\nuniform float time;\nuniform vec2 resolution;\n#define FC gl_FragCoord.xy\n#define R resolution\n#define T time\n#define N normalize\n#define MN min(R.x,R.y)\n#define S smoothstep\n#define SE(v,s) S(s+1./MN,s-1./MN,v)\n#define hue(a) (.25+.6*cos(6.3*(a)+vec3(0,83,21)))\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define mv (.1*sin(length(p.xz)+T*2.+p.z-p.x*3.))\nfloat map(vec3 p) {\n\tp.y+=20.;\n\tvec2 c=vec2(length(p.xz)-1.+mv, abs(p.y)-20.);\n\tfloat d=length(max(c,.0))+min(.0,max(c.x,c.y));\n\td*=.5;\n\treturn d;\n}\nvec3 norm(vec3 p) {\n\tfloat h=1e-3; vec2 k=vec2(-1,1);\n\treturn N(\n\t\tk.xyy*map(p+k.xyy*h)+\n\t\tk.yxy*map(p+k.yxy*h)+\n\t\tk.yyx*map(p+k.yyx*h)+\n\t\tk.xxx*map(p+k.xxx*h)\n\t);\n}\nvoid cam(inout vec3 p) {\n\tp.yz*=rot(.42);\n\tp.xz*=rot(-.42);\n}\nvoid main() {\n\tvec2 uv=(FC-.5*R)/MN;\n\tvec3 col=vec3(0),\n\tp=vec3(0,0,-7),\n\trd=N(vec3(uv,3));\n\tcam(rd); cam(p);\n\tfloat dd=.0;\n\tfor (float i=.0; i++<400.;) {\n\t\tfloat d=map(p);\n\t\tif (abs(d)<1e-3 || dd>200.) break;\n\t\tp+=rd*d;\n\t\tdd+=d;\n\t}\n\tvec3 mat=vec3(0), n=norm(p), lp=vec3(0,0,-3), l=N(lp-p);\n\tfloat refl=clamp(dot(reflect(rd,n),l),.0,1.), fres=pow(clamp(1.+dot(rd,n),.0,1.),5.);\n\tmat+=mix(vec3(1),hue(.8*max(.95,length(p)+mv)-T*.1),min(.95,length(p)+mv));\n\tmat+=.2;\n\tmat+=1.7*pow(clamp(refl,.0,1.),5.);\n\tmat=mix(mat,vec3(0),fres);\n\tif (dd<20.) col+=mat;\n\tmat=mix(vec3(.1,.2,.3),vec3(.01,.02,.03),S(.0,1.,.075*length(uv*10.)));\n\tcol=tanh(col*col);\n\tcol/=1.+exp(-col*col);\n\tcol=sqrt(col);\n\tif (dd>200.) col+=mat;\n\tcol=max(col,.08);\n  O=vec4(col,1);\n}</script>",
		"created_at" : "2025-05-17 16:50:59",
		"updated_at" : "2025-05-23 02:07:08",
		"slug" : "7512",
		"photo" : "photos/6828be7394b32.jpeg"
	},
	{
		"id" : 4,
		"user_id" : 1,
		"name" : "Recurse Center Creative Coding Mob",
		"description" : "A generative art sketch that draws **kaleidoscopic flower patterns** using polar geometry and trigonometry. Each flower blooms, rotates, and pulses with color and motion. Created in a live coding session.\n\n### ‚ú® Features\n\n* Interactive mouse click to add or alter flowers\n* Responsive resizing to fit any screen\n* Dynamic color shifts and pulsing animation\n* Centered layout with Flexbox\n\n---\n\n## üìÅ File Structure\n\n### `index.html`\n\n```html\n<body>\n  <script src=\"p5.min.js\"></script>\n  <script src=\"sketch.js\"></script>\n</body>\n<style>\nbody {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  margin: 0;\n  height: 100vh;\n}\n</style>\n```\n\n### `sketch.js` (Main Sketch Logic)\n\n#### üîß Setup\n\n* `createCanvas(windowWidth, windowHeight)` ‚Äî full window canvas\n* Randomly generates base colors (`redC`, `greenC`, `blueC`)\n* Initializes one `Flower` object at the center of the screen\n\n#### üé® Draw Loop\n\n* Clears the canvas with a background color\n* Translates coordinate system to center\n* Calls `display()` on all `Flower` objects\n\n#### üñ± Mouse Interaction\n\n* If you click near an existing flower: **it speeds up (doubles its animation rate)**\n* Elsewhere: **adds a new flower** at the clicked position\n\n#### ‚å®Ô∏è Keyboard Interaction\n\n* Press spacebar (`keyCode === 32`): resets and re-runs setup and draw (generates new parameters)\n\n#### üåº Flower Class\n\nEach `Flower` object has:\n\n* Position (`x`, `y`)\n* Color (`r`, `g`, `b`)\n* Rotation/animation state (`t`, `dt`)\n* Scaling factor and number of layers/petals\n\n##### `display()`\n\n* Draws multiple **rotating symmetrical layers**\n* Petals are created using arcs from trigonometric calculations\n* Each layer is drawn smaller and rotates slightly offset from others\n* Center has a glowing circle core\n\n---\n\n## üß† Core Concepts\n\n* **Polar Coordinates**: used to draw rotated and radial petal shapes\n* **Trigonometry (`cos`, `sin`, `acos`)**: calculates petal curvature\n* **Color Interpolation**: changing color based on layer depth and time\n* **Layering & Scaling**: each flower consists of multiple scaled-down layers\n\n---\n\n## ‚úÖ How to Run\n\n1. Include the [p5.js](https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.min.js) library\n2. Paste the code into an HTML + JS file structure\n3. Open in any modern browser\n\nOr use the [p5.js web editor](https://editor.p5js.org/).\n\n---\n\n## üé® Example Interaction\n\n* **Click once**: adds a flower\n* **Click on a flower**: speeds it up\n* **Press spacebar**: restarts with new randomness\n* **Resize window**: flowers adapt to new screen size\n\n---\n\n## üß™ Potential Enhancements\n\n* Add per-flower color selection\n* Save snapshots\n* Sync to music or sound input\n* Vary petal shape more (Bezier curves, noise)",
		"javascript" : "//recurse center creative coding mob on 5/21/25\nlet cnv, n;\nlet redC, greenC, blueC;\nlet t = 0;\nlet flowers;\nfunction setup() {\n  cnv = createCanvas(windowWidth, windowHeight);\n  flowers = [];\n  background(100);\n  redC = random(150, 200);\n  greenC = random(150, 200);\n  blueC = random(150, 255);\n  redC1 = random(150, 200);\n  greenC1 = random(150, 200);\n  blueC1 = random(150, 255);\n  angleMode(DEGREES);\n  n = random([3, 5, 6, 7, 8]);\n  nLayers = random([3, 4, 5]);\n  flowers.push(new Flower(0, 0));\n}\n\nfunction draw() {\n  background(redC1, greenC1, blueC);\n  translate(width / 2, height / 2);\n  for (let i = 0; i < flowers.length; i++) {\n    flowers[i].display();\n  }\n}\n\nfunction mousePressed() {\n  let newFlower = true;\n  for (let i = 0; i < flowers.length; i++) {\n    if (\n      dist(\n        mouseX - width / 2,\n        mouseY - height / 2,\n        flowers[i].x,\n        flowers[i].y\n      ) < 50\n    ) {\n      flowers[i].dt = flowers[i].dt * 2;\n      console.log(\n        dist(\n          mouseX - width / 2,\n          mouseY - height / 2,\n          flowers[i].x,\n          flowers[i].y\n        )\n      );\n      newFlower = false;\n    }\n  }\n  if (newFlower) {\n    flowers.push(new Flower(mouseX - width / 2, mouseY - height / 2));\n  }\n}\n\nfunction keyPressed() {\n  if ((keyCode = 32)) {\n    setup();\n    draw();\n  }\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n\nclass Flower {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.r = random(150, 200);\n    this.g = random(150, 200);\n    this.b = random(150, 255);\n    this.scale = random(0.5, 1.5);\n    this.t = 0;\n    this.dt = random(-0.12, 0.12);\n    this.nLayers = random([3, 4, 5]);\n    this.n = random([3, 5, 7, 9]);\n  }\n  display() {\n    push();\n\n    translate(this.x, this.y);\n    scale(this.scale);\n\n    this.t += this.dt;\n    let d = width / 4;\n    for (let j = 0; j < this.nLayers; j++) {\n      scale(1 - 0.1 * j);\n      rotate(360 / n / 2 + 360 * sin(this.t) * sin(this.t));\n      //rotate(360/nLayers*j)\n      for (let i = 0; i < this.n; i++) {\n        push();\n        rotate((360 / this.n) * i);\n        translate(d / 4, d / 2);\n        rotate(360 * sin(this.t) * i);\n\n        let x1 = 0;\n        let y1 = 0;\n\n        // circle(x1,y1,d);\n        let x2 = x1 - d / 2;\n        let y2 = 0;\n        // circle(x2,y2,d);\n        let dx = abs((x1 - x2) / 2);\n        let theta1a = 180 - abs(acos(dx / (d / 2)));\n        let theta1b = -theta1a;\n        let theta2a = abs(acos(dx / (d / 2)));\n        let theta2b = -theta2a;\n        strokeWeight(2);\n        //fill(0);\n        fill(\n          this.r + j * 10,\n          this.g + j * 10,\n          this.b + j * 10,\n          205 * abs(cos(this.t)) + 50\n        );\n        stroke(\n          this.r / 1.5,\n          this.g / 1.5,\n          this.b / 1.5,\n          205 * abs(cos(this.t)) + 50\n        );\n        beginShape();\n        for (let k = theta2a; k > theta2b; k--) {\n          vertex(x2 + (d / 2) * cos(k), y2 + (d / 2) * sin(k));\n        }\n        for (let k = theta2b; k < theta2a; k++) {\n          vertex(dx * 2 + x2 - (d / 2) * cos(k), y2 + (d / 2) * sin(k));\n        }\n        endShape();\n\n        pop();\n      }\n    }\n    fill(255, 238, 140, 205 * abs(cos(this.t)) + 50);\n    stroke(255, 238, 140, 205 * abs(cos(this.t)) + 50);\n\n    circle(0, 0, 30 * this.scale);\n    pop();\n  }\n}\n\n// background(redC,greenC,blueC);\n//   translate(width/2,height/2);\n//   circle(0,0,30);\n//   t+=0.1\n\n//   //position of circle1\n//   d = width/4;\n//   for(let j = 0;j<nLayers;j++){\n\n//     scale(1 - 0.1*j)\n//     rotate(360/n/2 + 360*sin(t)*sin(t))\n//     //rotate(360/nLayers*j)\n//   for(let i = 0;i<n;i++){\n//     push()\n//     rotate(360/n*i)\n//     translate(d/4,d/2)\n//     rotate(360*sin(t)*i)\n\n//     x1 = 0;\n//     y1 = 0;\n\n//     // circle(x1,y1,d);\n//     x2 = x1 - d/2;\n//     y2 = 0;\n//     // circle(x2,y2,d);\n//     dx = abs((x1 - x2) / 2);\n//     theta1a = 180 - abs(acos(dx / (d / 2)));\n//     theta1b = -theta1a;\n//     theta2a = abs(acos(dx / (d / 2)));\n//     theta2b = -theta2a;\n//     strokeWeight(2);\n//     //fill(0);\n//     fill(redC1 + j*10,greenC1+ j*10,blueC1+ j*10);\n//     stroke(redC1/1.5,greenC1/1.5,blueC1/1.5);\n//     beginShape();\n//     for (let k = theta2a; k > theta2b; k--) {\n//       vertex(x2 + (d / 2) * cos(k), y2 + (d / 2) * sin(k));\n//     }\n//     for (let k = theta2b; k < theta2a; k++) {\n//       vertex(dx * 2 + x2 - (d / 2) * cos(k), y2 + (d / 2) * sin(k));\n//     }\n//     endShape();\n\n//   pop()\n//   }\n//   }",
		"css" : "body {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  margin: 0;\n  height: 100vh;\n}\n\n    color: #fff;\n    line-height: 15px;\n    font-size: 30px;\n    font-family: 'LeagueSpartanVariable', Courier, monospace;\n    display: flex;\n    flex-wrap: wrap;\n    align-content: center;\n    justify-content: center;\n\n}\n\ndiv {\n    width: 25px;\n    height: 25px;\n    text-align: center;\n    // font-variation-settings: \"wght\" var(--wt);\n    font-weight: 200;\n}",
		"html" : "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.11.3/p5.min.js\"></script>",
		"created_at" : "2025-05-17 17:23:11",
		"updated_at" : "2025-05-23 02:12:18",
		"slug" : "32662350",
		"photo" : "photos/6828c74b30db0.jpeg"
	},
	{
		"id" : 5,
		"user_id" : 1,
		"name" : "Pixel Pulse Animation",
		"description" : "An interactive generative art piece built with vanilla JavaScript and the HTML Canvas API. It creates a **radiating, flickering pixel grid** that expands and contracts rhythmically in a wave-like pattern.\n\nInspired by [Hexagon Circle's CodePen](https://codepen.io/hexagoncircle/pen/KwPpdBZ), adapted and restructured for clarity and modularity.\n\n---\n\n## üé• Live Demo\n\n> **Click anywhere** on the screen to regenerate the animation with new random parameters.\n\n---\n\n## üß† Concept\n\nThis animation simulates a **pulse effect** in a grid of colorful squares (pixels). Each square:\n\n* Grows in size with a delay (based on its position),\n* Pulses between two sizes once fully grown,\n* Shrinks and hides when the animation reverses.\n\n---\n\n## üß∞ Technologies Used\n\n* **HTML5 Canvas**\n* **Vanilla JavaScript**\n* `ResizeObserver` for responsiveness\n* HSL color space for smooth gradient generation\n\n---\n\n## üóÇÔ∏è File Structure Overview\n\n```plaintext\nindex.html        # Contains the canvas and layout\nstyle.css         # CSS for fullscreen, flex layout, and container\nscript.js         # Full animation logic (Pixel class, render loop, resize handling)\n```\n\n---\n\n## üì¶ Main Components\n\n### ### 1. `Pixel` Class\n\nHandles the behavior of each individual square:\n\n* `show()` ‚Äî grows and pulses in size\n* `hide()` ‚Äî shrinks back down\n* `flicking()` ‚Äî causes a bouncing effect between min and max size\n\nEach pixel uses a **delay** to create a **wave-like animation** based on its distance from a point (e.g. center or bottom).\n\n---\n\n### 2. `initPixels()`\n\nCreates a grid of pixels and assigns:\n\n* Random `hsl()` color from a generated palette\n* Delay values for show/hide based on distance\n* Size and animation speed\n\n---\n\n### 3. `animate()`\n\nMain animation loop (`requestAnimationFrame`):\n\n* Clears canvas\n* Updates all pixels based on animation direction\n* Triggers reverse once the pulse reaches its peak\n\n---\n\n### 4. `resize()`\n\nEnsures the canvas fits the `#container` and regenerates pixel grid. Also re-runs the animation loop.\n\n> `ResizeObserver` automatically handles viewport changes!\n\n---\n\n## üìê Layout and Styling\n\n```css\nhtml, body {\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n  height: 100vh;\n  width: 100vw;\n  background: #1D1E22;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  gap: 50px;\n}\n\n#container {\n  width: 40vw;\n  height: 40vh;\n}\n```\n\n* Fully centered using `flexbox`\n* Black/dark gray background for contrast\n* `#container` is a responsive box that the canvas fills\n\n---\n\n## üìå Usage\n\n1. Clone or download the repository.\n2. Open `index.html` in any modern browser.\n3. Click inside the container to regenerate the animation.\n\n---\n\n## üöÄ Future Enhancements\n\n* Add sound-based interaction (e.g. audio input affects pixel size)\n* Enable click-based ripple origin points\n* Export canvas as image\n* Add mobile touch support\n\n---\n\n## üëÅÔ∏è Visual Preview\n\n```\nO       o  o---o      o    \n/ \\      |     /       |    \no---oo-o -o-  -O-  o  o O-o  \n|   ||    |   /    |  | |  | \no   oo    o  o---o o--o o-o  \n```\n\nInspired by **ASCII art symmetry** and **digital pulse visuals**.\n\n---\n\nLet me know if you'd like this packed into a downloadable project template or extended with features like GUI sliders, audio reactivity, or pixel shapes!",
		"javascript" : "const rand = (min, max) => {\n  return Math.random() * (max - min) + min;\n}\n\n// based on https://codepen.io/hexagoncircle/pen/KwPpdBZ\nclass Pixel {\n  constructor(x, y, color, speed, delay, delayHide, step, boundSize) {\n    this.x = x;\n    this.y = y;\n    \n    this.color = color;\n    this.speed = rand(0.1, 0.9) * speed;\n\n    this.size = 0;\n    this.sizeStep = rand(0, 0.5);\n    this.minSize = 0.5;\n    this.maxSizeAvailable = boundSize || 2;\n    this.maxSize = rand(this.minSize, this.maxSizeAvailable);\n    this.sizeDirection = 1;\n    \n    this.delay = delay;\n    this.delayHide = delayHide;\n    this.counter = 0;\n    this.counterHide = 0;\n    this.counterStep = step;\n\n    this.isHidden = false;\n    this.isFlicking = false;\n  }\n\n  draw(ctx) {\n    const centerOffset = this.maxSizeAvailable * 0.5 - this.size * 0.5;\n\n    ctx.fillStyle = this.color;\n    ctx.fillRect(\n      this.x + centerOffset,\n      this.y + centerOffset,\n      this.size,\n      this.size\n    );\n  }\n\n  show() {\n    this.isHidden = false;\n    this.counterHide = 0;\n\n    if (this.counter <= this.delay) {\n      this.counter += this.counterStep;\n      return;\n    }\n\n    if (this.size >= this.maxSize) {\n      this.isFlicking = true;\n    }\n\n    if (this.isFlicking) {\n      this.flicking();\n    } else {\n      this.size += this.sizeStep;\n    }\n  }\n\n  hide() {\n    this.counter = 0;\n\n    if (this.counterHide <= this.delayHide) {\n      this.counterHide += this.counterStep;\n      if (this.isFlicking) {\n        this.flicking();\n      }\n      return;\n    }\n    \n    this.isFlicking = false;\n\n    if (this.size <= 0) {\n      this.size = 0;\n      this.isHidden = true;\n      return;\n    } else {\n      this.size -= 0.05;\n    }\n  }\n\n  flicking() {\n    if (this.size >= this.maxSize) {\n      this.sizeDirection = -1;\n    } else if (this.size <= this.minSize) {\n      this.sizeDirection = 1;\n    }\n    \n    this.size += this.sizeDirection * this.speed; \n  }\n}\n\nconst canvas = document.createElement(\"canvas\");\nconst container = document.querySelector(\"#container\");\nconst interval = 1000 / 60;\n\ncontainer.append(canvas);\n\nconst ctx = canvas.getContext(\"2d\");\n\nlet width;\nlet height;\nlet pixels;\nlet request;\nlet lastTime;\nlet ticker;\nlet maxTicker = 360;\nlet animationDirection = 1;\n\nconst getDelay = (x, y, direction) => {\n  let dx = x - width * 0.5;\n  let dy = y - height;\n  \n  if (direction) {\n    dy = y;\n  }\n  \n  return Math.sqrt(dx ** 2 + dy ** 2);\n}\n\nconst initPixels = () => {\n  const h = Math.floor(rand(0, 360));\n  const colorsLen = 5;\n  const colors = Array.from({ length: colorsLen }, (_, index) => `hsl(${Math.floor(rand(h, h + (index + 1) * 10))} 100% ${rand(50, 100)}%)`);\n  \n  const gap = 6; /*// Math.floor(width * 0.025)*/\n  const step = (width + height) * 0.005;\n  const speed = rand(0.008, 0.25);\n  const maxSize = Math.floor(gap * 0.5);\n  \n  pixels = [];\n  \n  for (let x = 0; x < width; x += gap) {\n    for (let y = 0; y < height; y += gap) {\n      if (x + maxSize > width || y + maxSize > height) {\n        continue;\n      }\n\n      const color = colors[Math.floor(Math.random() * colorsLen)];\n      const delay = getDelay(x, y);\n      const delayHide = getDelay(x, y);\n\n      pixels.push(new Pixel(x, y, color, speed, delay, delayHide, step, maxSize));\n    }\n  }\n}\n\nconst animate = () => {\n  request = requestAnimationFrame(animate);\n  \n  const now = performance.now();\n  const diff = now - (lastTime || 0);\n\n  if (diff < interval) {\n    return;\n  }\n\n  lastTime = now - (diff % interval);\n\n  ctx.clearRect(0, 0, width, height);\n\n  if (ticker >= maxTicker) {\n    animationDirection = -1;\n  } else if (ticker <= 0) {\n    animationDirection = 1;\n  }\n  \n  let allHidden = true;\n\n  pixels.forEach((pixel) => {\n    if (animationDirection > 0) {\n      pixel.show();\n    } else {\n      pixel.hide();\n      allHidden = allHidden && pixel.isHidden;\n    }\n\n    pixel.draw(ctx);\n  });\n  \n  ticker += animationDirection;\n  \n  if (animationDirection < 0 && allHidden) {\n    ticker = 0;\n  }\n}\n\nconst resize = () => {\n  cancelAnimationFrame(request);\n  \n  const rect = container.getBoundingClientRect();\n \n  width = Math.floor(rect.width);\n  height = Math.floor(rect.height);\n  \n  canvas.width = width;\n  canvas.height = height;\n  \n  initPixels();\n  \n  ticker = 0;\n  \n  animate();\n}\n\nnew ResizeObserver(resize).observe(container);\n\ndocument.addEventListener('click', resize);",
		"css" : "html,\nbody {\n  padding: 0;\n  margin: 0;\n  overflow: hidden;\n  height: 100vh;\n  width: 100vw;\n  background: #1D1E22;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  gap: 50px;\n}\n\n#container {\n  width: 40vw;\n  height: 40vh;\n}",
		"html" : "<!--\n  O       o  o---o      o    \n / \\      |     /       |    \no---oo-o -o-  -O-  o  o O-o  \n|   ||    |   /    |  | |  | \no   oo    o  o---o o--o o-o  \n-->\n\n<div id=\"container\"></div>\n\n<div class=\"hint\">\n  Click to regenerate\n</div>",
		"created_at" : "2025-05-17 17:34:46",
		"updated_at" : "2025-05-23 02:18:00",
		"slug" : "7533",
		"photo" : "photos/6828c8b6ad293.jpeg"
	},
	{
		"id" : 6,
		"user_id" : 1,
		"name" : "Creative display of elements",
		"description" : "I find it a very good display of the elements.",
		"javascript" : "const mySplitText = new SplitText('body', {type:\"chars\", position: \"relative\" }); \n// gsap.to(mySplitText.chars, {fontWeight: 900, duration: 5})\nsetTimeout(() => {\n  gsap.timeline({ yoyo: true, repeat: -1, repeatDelay: 0.5, delay: 1})\n    .to(mySplitText.chars, { \n      duration: .2,\n      fontWeight: 900, \n      color: '#146EF5', \n      scale:.7,\n      y: 6,\n      ease: 'power2.in',\n      rotation: '360deg',\n      stagger:{ \n        grid: [14,14], \n        amount: .8, \n        from: 'center',\n      } \n    })\n    .to(mySplitText.chars, { \n      duration: .4,\n      fontWeight: 200,  \n      color: '#fff',\n      scale: 1,\n      y: 0,\n      rotation: '720deg',\n      ease: 'power3.inOut',\n      stagger:{ \n        grid: [14,14], \n        amount: .8, \n        from: 'center'\n      } \n    }, '-=.3')\n}, 500)",
		"css" : "@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap');\n\nmain {\n  background-color: #15272a;\n  padding: 1rem;\n}\n\n.media-primary,\n.media-secondary {\n  grid-area: 1 / 1 / 2 / 2;\n}\n\n.media-primary {\n  aspect-ratio: 346 / 300;\n  clip-path: url(#media-clip-path-default);\n  position: relative;\n}\n\n.media-primary img {\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n}\n\n.media-secondary {\n  aspect-ratio: 122 / 119;\n  background-color: #465e5f;\n  border-radius: 12px;\n  justify-self: end;\n  width: 35%;\n}\n\n.media-secondary svg {\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n}\n\n.text-heading {\n  background-color: #b6d2d3;\n  border-radius: 0.75rem;\n  clip-path: url(#clip-heading);\n  font-size: 2.5rem;\n  font-weight: bold;\n  line-height: 1.15;\n  margin-block-start: 1.5rem;\n  padding: 1rem 3rem 1rem 1rem;\n  position: relative;\n}\n\n.text-body {\n  color: #fff;\n  margin-block-start: 1.5rem;\n}\n\n.ctas {\n  display: flex;\n  gap: 1rem;\n  margin-block-start: 1.5rem;\n}\n\n.cta {\n  border: 1px solid #fff;\n  border-radius: 4px;\n  font-size: 0.75rem;\n  padding: 0.5rem 1rem;\n  text-align: center;\n}\n\n.cta-primary {\n  background-color: #fff;\n  color: #15272a;\n}\n\n.cta-secondary {\n  color: #ffffff;\n}\n\n.content-container {\n  container-name: content-container;\n  container-type: inline-size;\n  display: grid;\n  margin-inline: auto;\n  max-inline-size: 30rem;\n}\n\n.pseudo-corner {\n  display: none;\n}\n\n@container content-container (min-width: 343px) {\n  .text-heading {\n    max-inline-size: 85%;\n  }\n}\n\n@media screen and (min-width: 768px) {\n  .content-container {\n    max-inline-size: 75rem;\n  }\n}\n\n@container content-container (min-width: 736px) {\n  .media-primary {\n    align-self: end;\n    clip-path: url(#media-clip-path-full);\n    width: 50%;\n  }\n\n  .media-secondary {\n    aspect-ratio: 240 / 220;\n    width: 20%;\n  }\n\n  .text-content {\n    grid-area: 1 / 1 / 2 / 2;\n    position: relative;\n    z-index: 2;\n    display: grid;\n    grid-template-rows: 1fr auto;\n  }\n\n  .text-heading {\n    align-items: start;\n    background-color: unset;\n    display: grid;\n    clip-path: unset;\n    font-optical-sizing: auto;\n    font-size: 7.125cqw;\n    font-weight: 700;\n    font-style: normal;\n    justify-items: start;\n    margin-block-start: 0;\n    max-inline-size: 100%;\n    padding: 0;\n  }\n\n  .pseudo-corner {\n    color: #b6d2d3;\n    height: 24px;\n    pointer-events: none;\n    position: absolute;\n    width: 24px;\n  }\n\n  .text-heading-aligned {\n    align-items: flex-start;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .span-1 {\n    border-radius: 0.75rem 0.75rem 0 0.75rem;\n  }\n\n  .span-2 {\n    align-self: end;\n    border-radius: 0 0 0 0.75rem;\n  }\n\n  .pseudo-corner {\n    display: block;\n  }\n\n  .span-2 .pseudo-corner:first-child,\n  .span-3 .pseudo-corner {\n    left: -24px;\n    top: 0;\n  }\n\n  .span-2 .pseudo-corner:last-child {\n    bottom: 0;\n    right: -24px;\n    transform: rotate(180deg);\n  }\n\n  .span-3 {\n    border-radius: 0 0.75rem 0.75rem 0.75rem;\n    justify-self: end;\n  }\n\n  .span-1,\n  .span-2,\n  .span-3 {\n    background-color: #b6d2d3;\n    padding: 0.25rem 1rem 0.75rem;\n    position: relative;\n  }\n\n  .text-body {\n    display: flex;\n    justify-content: flex-end;\n  }\n\n  .text-body-container {\n    padding-inline-start: 1.5rem;\n    width: 50%;\n  }\n}\n\n@container content-container (min-width: 736px) {\n  .text-body-container {\n    font-size: 1.9cqw;\n    padding-inline-start: 1.5rem;\n    min-height: 160px;\n    width: 48%;\n  }\n  \n  .media-primary {\n    width: 51%;\n  }\n\n  .media-secondary {\n    aspect-ratio: 260 / 240;\n    width: 20%;\n  }\n}\n\n@container content-container (min-width: 980px) {\n  .text-body-container {\n    padding-inline-start: 1.5rem;\n    width: 46%;\n  }\n}\n\n@container content-container (min-width: 1088px) {\n  .text-body-container {\n    font-size: 1.5cqw;\n    padding-inline-start: 1.5rem;\n    min-height: unset;\n    width: 45%;\n  }\n\n  .media-primary {\n    aspect-ratio: 320 / 195;\n    width: 53%;\n  }\n\n  .media-secondary {\n    aspect-ratio: 270 / 215;\n    width: 22%;\n  }\n}\n\n@container content-container (min-width: 1200px) {\n  .media-primary {\n    clip-path: url(#media-clip-path-full);\n    width: 45%;\n  }\n\n  .media-primary {\n    aspect-ratio: 320 / 195;\n    width: 53%;\n  }\n\n  .media-secondary {\n    aspect-ratio: 250 / 195;\n    width: 22%;\n  }\n\n  .text-body-container {\n    padding-block-start: 0;\n    padding-inline-start: 1.5rem;\n    width: 46%;\n  }\n}\n\n/* Animation */\n\n.media-secondary {\n  display: grid;\n  position: relative;\n  overflow: hidden;\n}\n\n.animated-icon {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  grid-area: 1 / 1 / 2 / 2;\n}\n\n.animated-icon img {\n  height: auto;\n  opacity: 0;\n  width: 80%;\n  animation: rotateImages 9s infinite cubic-bezier(0.4, 0, 0.2, 1);\n  transform-origin: center center;\n}\n\n.animated-icon:nth-child(1) img {\n  animation-delay: 0s;\n}\n\n.animated-icon:nth-child(2) img {\n  animation-delay: 3s;\n  animation-name: rotateImagesReverse;\n}\n\n.animated-icon:nth-child(3) img {\n  animation-delay: 6s;\n}\n\n@keyframes rotateImages {\n  0% {\n    opacity: 0;\n    transform: scale(0.8) rotate(-15deg);\n  }\n  5% {\n    opacity: 1;\n    transform: scale(1.1) rotate(5deg);\n  }\n  10% {\n    transform: scale(1) rotate(0deg);\n  }\n  30% {\n    opacity: 1;\n    transform: scale(1) rotate(0deg);\n  }\n  33% {\n    opacity: 0;\n    transform: scale(0.8) rotate(15deg);\n  }\n  100% {\n    opacity: 0;\n    transform: scale(0.8) rotate(15deg);\n  }\n}\n\n@keyframes rotateImagesReverse {\n  0% {\n    opacity: 0;\n    transform: scale(0.8) rotate(15deg);\n  }\n  5% {\n    opacity: 1;\n    transform: scale(1.1) rotate(-5deg);\n  }\n  10% {\n    transform: scale(1) rotate(0deg);\n  }\n  30% {\n    opacity: 1;\n    transform: scale(1) rotate(0deg);\n  }\n  33% {\n    opacity: 0;\n    transform: scale(0.8) rotate(-15deg);\n  }\n  100% {\n    opacity: 0;\n    transform: scale(0.8) rotate(-15deg);\n  }\n}\n\n* {\n  box-sizing: border-box;\n}\n\n/* Base styles */\n\nbody {\n  background-color: #15272a;\n  font-family: \"Montserrat\", sans-serif;\n  font-optical-sizing: auto;\n  font-style: normal;\n  line-height: 1.75;\n  margin: 0;\n}\n\nh1 {\n  font-weight: 700;\n  line-height: 1.25;\n  margin: 0;\n}\n\np {\n  margin: 0;\n}\n\na {\n  text-decoration: none;\n}\n\nimg {\n  display: block;\n  height: auto;\n  max-width: 100%;\n}",
		"html" : "<main>\n  <section class=\"content-container\">\n    <div class=\"media-primary\">\n      <img alt=\"Generated image of some people working at a computer\"\n        src=\"https://assets.codepen.io/140/learning-grid-and-clip-path.png\" />\n    </div>\n    <div class=\"media-secondary\">\n      <figure class=\"animated-icon\">\n        <img alt=\"illustration of a laptop\" src=\"https://assets.codepen.io/140/laptop.webp\" />\n      </figure>\n      <figure class=\"animated-icon\">\n        <img alt=\"illustration of a grid\" src=\"https://assets.codepen.io/140/grid.webp\" />\n      </figure>\n      <figure class=\"animated-icon\">\n        <img alt=\"illustration respresenting a clip-path\" src=\"https://assets.codepen.io/140/clip-path.webp\" />\n      </figure>\n    </div>\n    <div class=\"text-content\">\n      <div>\n        <h1 class=\"text-heading\">\n          <span class=\"text-heading-aligned\">\n            <span class=\"span-1\" id=\"first-line\">Gaining knowledge</span>\n            <span class=\"span-2\">by building <svg class=\"pseudo-corner\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\"\n                viewBox=\"0 0 12 12\" aria-hidden=\"true\" role=\"presentation\">\n                <path fill=\"currentColor\" d=\"M12 12C12 5.373 6.627 0 0 0h12v12Z\" />\n              </svg><svg class=\"pseudo-corner\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 12 12\"\n                aria-hidden=\"true\" role=\"presentation\">\n                <path fill=\"currentColor\" d=\"M12 12C12 5.373 6.627 0 0 0h12v12Z\" />\n              </svg></span>\n          </span>\n          <span class=\"span-3\">web things <svg class=\"pseudo-corner\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\"\n              viewBox=\"0 0 12 12\" aria-hidden=\"true\" role=\"presentation\">\n              <path fill=\"currentColor\" d=\"M12 12C12 5.373 6.627 0 0 0h12v12Z\" />\n            </svg></span>\n        </h1>\n      </div>\n      <div class=\"text-body\">\n        <div class=\"text-body-container\">\n          <p>\n            We're building an example that shares code created while learning from others, showing how collaboration and\n            exploration can lead to enhanced outcomes.\n          </p>\n          <div class=\"ctas\">\n            <a class=\"cta cta-primary\" href=\"https://mode.com\">Mode.com</a>\n            <a class=\"cta cta-secondary\" href=\"https://codepen.io/collection/KwKNaN\">\n              CodePen\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n  <svg width=\"0\" height=\"0\">\n    <defs>\n      <clipPath id=\"clip-heading\" clipPathUnits=\"objectBoundingBox\">\n        <path\n          d=\"\n        M0.044,0 H0.852 A0.037,0.05 0,0,1 0.889,0.05 V0.25 A0.037,0.05 0,0,0 0.926,0.30 H0.963 A0.037,0.05 0,0,1 1.000,0.35 V0.70 A0.037,0.05 0,0,1 0.963,0.75 H0.926 A0.037,0.05 0,0,0 0.889,0.80 V0.95 A0.037,0.05 0,0,1 0.852,1 H0.044 A0.044,0.06 0,0,1 0,0.94 V0.06 A0.044,0.06 0,0,1 0.044,0 Z\" />\n      </clipPath>\n    </defs>\n  </svg>\n  <svg width=\"0\" height=\"0\">\n    <defs>\n      <clipPath id=\"media-clip-path-default\" clipPathUnits=\"objectBoundingBox\">\n        <path\n          d=\" M0.035,0 H0.555 A0.035,0.035 0,0,1 0.59,0.04 V0.423 A0.035,0.035 0,0,0 0.625,0.463 H0.965 A0.035,0.035 0,0,1 1.000,0.503 V0.96 A0.035,0.035 0,0,1 0.965,1 H0.035 A0.035,0.035 0,0,1 0,0.96 V0.04 A0.035,0.035 0,0,1 0.035,0 Z\" />\n      </clipPath>\n    </defs>\n  </svg>\n  <svg width=\"0\" height=\"0\">\n    <defs>\n      <clipPath id=\"media-clip-path-full\" clipPathUnits=\"objectBoundingBox\">\n        <path\n          d=\"M0.0188,0 H0.5203 A0.0188,0.0308 0,0,1 0.5391,0.0308 V0.2769 A0.0188,0.0308 0,0,0 0.5578,0.3077 H0.9813 A0.0188,0.0308 0,0,1 1,0.3385 V0.9692 A0.0188,0.0308 0,0,1 0.9813,1 H0.0188 A0.0188,0.0308 0,0,1 0,0.9692 V0.0308 A0.0188,0.0308 0,0,1 0.0188,0 Z\" />\n      </clipPath>\n    </defs>\n  </svg>\n</main>",
		"created_at" : "2025-05-17 19:16:12",
		"updated_at" : "2025-05-23 03:11:52",
		"slug" : "235",
		"photo" : "photos/6828e07ce6b23.jpeg"
	},
	{
		"id" : 10,
		"user_id" : 1,
		"name" : "Space Anomaly",
		"description" : "> *Energy is everything...*",
		"javascript" : "/*********\n * made by Matthias Hurrle (@atzedent)\n */\nlet editMode = false /*// set to false to hide the code editor on load*/\nlet resolution = .5 /*// set 1 for full resolution or to .5 to start with half resolution on load*/\nlet renderDelay = 1000 /*// delay in ms before rendering the shader after a change*/\nlet dpr = Math.max(1, resolution * window.devicePixelRatio)\nlet frm, source, editor, store, renderer, pointers\nconst shaderId = 'oggKrGW'\nwindow.onload = init\n\nfunction resize() {\n  const { innerWidth: width, innerHeight: height } = window\n\n  canvas.width = width * dpr\n  canvas.height = height * dpr\n\n  if (renderer) {\n    renderer.updateScale(dpr)\n  }\n}\nfunction toggleView() {\n  editor.hidden = btnToggleView.checked\n  canvas.style.setProperty('--canvas-z-index', btnToggleView.checked ? 0 : -1)\n}\nfunction reset() {\n  let shader = source\n  editor.text = shader ? shader.textContent : renderer.defaultSource\n  store.putShaderSource(shaderId, editor.text)\n  renderThis()\n}\nfunction toggleResolution() {\n  resolution = btnToggleResolution.checked ? .5 : 1\n  dpr = Math.max(1, resolution * window.devicePixelRatio)\n  pointers.updateScale(dpr)\n  resize()\n}\nfunction loop(now) {\n  renderer.updateMouse(pointers.first)\n  renderer.updatePointerCount(pointers.count)\n  renderer.updatePointerCoords(pointers.coords)\n  renderer.updateMove(pointers.move)\n  renderer.render(now)\n  frm = requestAnimationFrame(loop)\n}\nfunction renderThis() {\n  editor.clearError()\n  store.putShaderSource(shaderId, editor.text)\n\n  const result = renderer.test(editor.text)\n\n  if (result) {\n    editor.setError(result)\n  } else {\n    renderer.updateShader(editor.text)\n  }\n  cancelAnimationFrame(frm) /*// Always cancel the previous frame!*/\n  loop(0)\n}\nconst debounce = (fn, delay) => {\n  let timerId\n  return (...args) => {\n    clearTimeout(timerId)\n    timerId = setTimeout(() => fn.apply(this, args), delay)\n  }\n}\nconst render = debounce(renderThis, renderDelay)\nfunction init() {\n  source = document.querySelector(\"script[type='x-shader/x-fragment']\")\n\n  document.title = \"Sketchy, But Keeps Spinning\"\n\n  renderer = new Renderer(canvas, dpr)\n  pointers = new PointerHandler(canvas, dpr)\n  store    = new Store(window.location)\n  editor   = new Editor(codeEditor, error, indicator)\n  editor.text = source.textContent\n  renderer.setup()\n  renderer.init()\n\n  if (!editMode) {\n    btnToggleView.checked = true\n    toggleView()\n  }\n  if (resolution === .5) {\n    btnToggleResolution.checked = true\n    toggleResolution()\n  }\n  canvas.addEventListener('shader-error', e => editor.setError(e.detail))\n\n  resize()\n\n  if (renderer.test(source.textContent) === null) {\n    renderer.updateShader(source.textContent)\n  }\n  loop(0)\n  window.onresize = resize\n  window.addEventListener(\"keydown\", e => {\n    if (e.key === \"L\" && e.ctrlKey) {\n      e.preventDefault()\n      btnToggleView.checked = !btnToggleView.checked\n      toggleView()\n    }\n  })\n}\nclass Renderer {\n  #vertexSrc = \"#version 300 es\\nprecision highp float;\\nin vec4 position;\\nvoid main(){gl_Position=position;}\"\n  #fragmtSrc = \"#version 300 es\\nprecision highp float;\\nout vec4 O;\\nuniform float time;\\nuniform vec2 resolution;\\nvoid main() {\\n\\tvec2 uv=gl_FragCoord.xy/resolution;\\n\\tO=vec4(uv,sin(time)*.5+.5,1);\\n}\"\n  #vertices = [-1, 1, -1, -1, 1, 1, 1, -1]\n  constructor(canvas, scale) {\n    this.canvas = canvas\n    this.scale = scale\n    this.gl = canvas.getContext(\"webgl2\")\n    this.gl.viewport(0, 0, canvas.width * scale, canvas.height * scale)\n    this.shaderSource = this.#fragmtSrc\n    this.mouseMove = [0, 0]\n    this.mouseCoords = [0, 0]\n    this.pointerCoords = [0, 0]\n    this.nbrOfPointers = 0\n  }\n  get defaultSource() { return this.#fragmtSrc }\n  updateShader(source) {\n    this.reset()\n    this.shaderSource = source\n    this.setup()\n    this.init()\n  }\n  updateMove(deltas) {\n    this.mouseMove = deltas\n  }\n  updateMouse(coords) {\n    this.mouseCoords = coords\n  }\n  updatePointerCoords(coords) {\n    this.pointerCoords = coords\n  }\n  updatePointerCount(nbr) {\n    this.nbrOfPointers = nbr\n  }\n  updateScale(scale) {\n    this.scale = scale\n    this.gl.viewport(0, 0, this.canvas.width * scale, this.canvas.height * scale)\n  }\n  compile(shader, source) {\n    const gl = this.gl\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.error(gl.getShaderInfoLog(shader))\n      this.canvas.dispatchEvent(new CustomEvent('shader-error', { detail: gl.getShaderInfoLog(shader) }))\n    }\n  }\n  test(source) {\n    let result = null\n    const gl = this.gl\n    const shader = gl.createShader(gl.FRAGMENT_SHADER)\n    gl.shaderSource(shader, source)\n    gl.compileShader(shader)\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      result = gl.getShaderInfoLog(shader)\n    }\n    if (gl.getShaderParameter(shader, gl.DELETE_STATUS)) {\n      gl.deleteShader(shader)\n    }\n    return result\n  }\n  reset() {\n    const { gl, program, vs, fs } = this\n    if (!program || gl.getProgramParameter(program, gl.DELETE_STATUS)) return\n    if (gl.getShaderParameter(vs, gl.DELETE_STATUS)) {\n      gl.detachShader(program, vs)\n      gl.deleteShader(vs)\n    }\n    if (gl.getShaderParameter(fs, gl.DELETE_STATUS)) {\n      gl.detachShader(program, fs)\n      gl.deleteShader(fs)\n    }\n    gl.deleteProgram(program)\n  }\n  setup() {\n    const gl = this.gl\n    this.vs = gl.createShader(gl.VERTEX_SHADER)\n    this.fs = gl.createShader(gl.FRAGMENT_SHADER)\n    this.compile(this.vs, this.#vertexSrc)\n    this.compile(this.fs, this.shaderSource)\n    this.program = gl.createProgram()\n    gl.attachShader(this.program, this.vs)\n    gl.attachShader(this.program, this.fs)\n    gl.linkProgram(this.program)\n\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n      console.error(gl.getProgramInfoLog(this.program))\n    }\n  }\n  init() {\n    const { gl, program } = this\n    this.buffer = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.#vertices), gl.STATIC_DRAW)\n\n    const position = gl.getAttribLocation(program, \"position\")\n\n    gl.enableVertexAttribArray(position)\n    gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0)\n\n    program.resolution = gl.getUniformLocation(program, \"resolution\")\n    program.time = gl.getUniformLocation(program, \"time\")\n    program.move = gl.getUniformLocation(program, \"move\")\n    program.touch = gl.getUniformLocation(program, \"touch\")\n    program.pointerCount = gl.getUniformLocation(program, \"pointerCount\")\n    program.pointers = gl.getUniformLocation(program, \"pointers\")\n  }\n  render(now = 0) {\n    const { gl, program, buffer, canvas, mouseMove, mouseCoords, pointerCoords, nbrOfPointers } = this\n    \n    if (!program || gl.getProgramParameter(program, gl.DELETE_STATUS)) return\n\n    gl.clearColor(0, 0, 0, 1)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n    gl.useProgram(program)\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\n    gl.uniform2f(program.resolution, canvas.width, canvas.height)\n    gl.uniform1f(program.time, now * 1e-3)\n    gl.uniform2f(program.move, ...mouseMove)\n    gl.uniform2f(program.touch, ...mouseCoords)\n    gl.uniform1i(program.pointerCount, nbrOfPointers)\n    gl.uniform2fv(program.pointers, pointerCoords)\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n  }\n}\nclass Store {\n  constructor(key) {\n    this.key = key\n    this.store = window.localStorage\n  }\n  #ownShadersKey = 'ownShaders'\n  #StorageType = Object.freeze({\n    shader: 'fragmentSource',\n    config: 'config'\n  })\n  #getKeyPrefix(type) {\n    return `${type}${btoa(this.key)}`\n  }\n  #getKey(type, name) {\n    return `${this.#getKeyPrefix(type)}${btoa(name)}`\n  }\n  putShaderSource(name, source) {\n    const storageType = this.#StorageType.shader\n    this.store.setItem(this.#getKey(storageType, name), source)\n  }\n  getShaderSource(name) {\n    const storageType = this.#StorageType.shader\n    return this.store.getItem(this.#getKey(storageType, name))\n  }\n  deleteShaderSource(name) {\n    const storageType = this.#StorageType.shader\n    this.store.removeItem(this.#getKey(storageType, name))\n  }\n  /** @returns {{title:string, uuid:string}[]} */\n  getOwnShaders() {\n    const storageType = this.#StorageType.config\n    const result = this.store.getItem(this.#getKey(storageType, this.#ownShadersKey))\n    \n    return result ? JSON.parse(result) : []\n  }\n  /** @param {{title:string, uuid:string}[]} shader */\n  putOwnShader(shader) {\n    const ownShaders = this.getOwnShaders()\n    const storageType = this.#StorageType.config\n    const index = ownShaders.findIndex((s) => s.uuid === shader.uuid)\n    if (index === -1) {\n      ownShaders.push(shader)\n    } else {\n      ownShaders[index] = shader\n    }\n    this.store.setItem(this.#getKey(storageType, this.#ownShadersKey), JSON.stringify(ownShaders))\n  }\n  deleteOwnShader(uuid) {\n    const ownShaders = this.getOwnShaders()\n    const storageType = this.#StorageType.config\n    this.store.setItem(this.#getKey(storageType, this.#ownShadersKey), JSON.stringify(ownShaders.filter((s) => s.uuid !== uuid) ))\n    this.deleteShaderSource(uuid)\n  }\n  /** @param {string[]} keep The names of the shaders to keep*/\n  cleanup(keep=[]) {\n    const storageType = this.#StorageType.shader\n    const ownShaders = this.getOwnShaders().map((s) => this.#getKey(storageType, s.uuid))\n    const premadeShaders = keep.map((name) => this.#getKey(storageType, name))\n    const keysToKeep = [...ownShaders, ...premadeShaders]\n    const result = []\n\n    for (let i = 0; i < this.store.length; i++) {\n      const key = this.store.key(i)\n\n      if (key.startsWith(this.#getKeyPrefix(this.#StorageType.shader)) && !keysToKeep.includes(key)) {\n        result.push(key)\n      }\n    }\n\n    result.forEach((key) => this.store.removeItem(key))\n  }\n}\nclass PointerHandler {\n  constructor(element, scale) {\n    this.scale = scale\n    this.active = false\n    this.pointers = new Map()\n    this.lastCoords = [0,0]\n    this.moves = [0,0]\n    const map = (element, scale, x, y) => [x * scale, element.height - y * scale]\n    element.addEventListener(\"pointerdown\", (e) => {\n      this.active = true\n      this.pointers.set(e.pointerId, map(element, this.getScale(), e.clientX, e.clientY))\n    })\n    element.addEventListener(\"pointerup\", (e) => {\n      if (this.count === 1) {\n        this.lastCoords = this.first\n      }\n      this.pointers.delete(e.pointerId)\n      this.active = this.pointers.size > 0\n    })\n    element.addEventListener(\"pointerleave\", (e) => {\n      if (this.count === 1) {\n        this.lastCoords = this.first\n      }\n      this.pointers.delete(e.pointerId)\n      this.active = this.pointers.size > 0\n    })\n    element.addEventListener(\"pointermove\", (e) => {\n      if (!this.active) return\n      this.lastCoords = [e.clientX, e.clientY]\n      this.pointers.set(e.pointerId, map(element, this.getScale(), e.clientX, e.clientY))\n      this.moves = [this.moves[0]+e.movementX, this.moves[1]+e.movementY]\n    })\n  }\n  getScale() {\n    return this.scale\n  }\n  updateScale(scale) { this.scale = scale }\n  reset() {\n    this.pointers.clear()\n    this.active = false\n    this.moves = [0,0]\n  }\n  get count() {\n    return this.pointers.size\n  }\n  get move() {\n    return this.moves\n  }\n  get coords() {\n    return this.pointers.size > 0 ? Array.from(this.pointers.values()).map((p) => [...p]).flat() : [0, 0]\n  }\n  get first() {\n    return this.pointers.values().next().value || this.lastCoords\n  }\n}\nclass Editor {\n  constructor(textarea, errorfield, errorindicator) {\n    this.textarea = textarea\n    this.errorfield = errorfield\n    this.errorindicator = errorindicator\n    textarea.addEventListener('keydown', this.handleKeydown.bind(this))\n    textarea.addEventListener('scroll', this.handleScroll.bind(this))\n  }\n  get hidden() { return this.textarea.classList.contains('hidden') }\n  set hidden(value) { value ? this.#hide() : this.#show() }\n  get text() { return this.textarea.value }\n  set text(value) { this.textarea.value = value }\n  get scrollTop() { return this.textarea.scrollTop }\n  set scrollTop(value) { this.textarea.scrollTop = value }\n  setError(message) {\n    this.errorfield.innerHTML = message\n    this.errorfield.classList.add('opaque')\n    const match = message.match(/ERROR: \\d+:(\\d+):/)\n    const lineNumber = match ? parseInt(match[1]) : 0\n    const overlay = document.createElement('pre')\n\n    overlay.classList.add('overlay')\n    overlay.textContent = '\\n'.repeat(lineNumber)\n\n    document.body.appendChild(overlay)\n\n    const offsetTop = parseInt(getComputedStyle(overlay).height)\n\n    this.errorindicator.style.setProperty('--top', offsetTop + 'px')\n    this.errorindicator.style.visibility = 'visible'\n\n    document.body.removeChild(overlay)\n  }\n  clearError() {\n    this.errorfield.textContent = ''\n    this.errorfield.classList.remove('opaque')\n    this.errorfield.blur()\n    this.errorindicator.style.visibility = 'hidden'\n  }\n  focus() {\n    this.textarea.focus()\n  }\n  #hide() {\n    for (const el of [this.errorindicator, this.errorfield, this.textarea]) {\n      el.classList.add('hidden')\n    }\n  }\n  #show() {\n    for (const el of [this.errorindicator, this.errorfield, this.textarea]) {\n      el.classList.remove('hidden')\n    }\n    this.focus()\n  }\n  handleScroll() {\n    this.errorindicator.style.setProperty('--scroll-top', `${this.textarea.scrollTop}px`)\n  }\n  handleKeydown(event) {\n    if (event.key === \"Tab\") {\n      event.preventDefault()\n      this.handleTabKey(event.shiftKey)\n    } else if (event.key === \"Enter\") {\n      event.preventDefault()\n      this.handleEnterKey()\n    }\n  }\n  handleTabKey(shiftPressed) {\n    if (this.#getSelectedText() !== \"\") {\n      if (shiftPressed) {\n        this.#unindentSelectedText()\n        return\n      }\n      this.#indentSelectedText()\n    } else {\n      this.#indentAtCursor()\n    }\n  }\n  #getSelectedText() {\n    const editor = this.textarea\n    const start = editor.selectionStart\n    const end = editor.selectionEnd\n    return editor.value.substring(start, end)\n  }\n  #indentAtCursor() {\n    const editor = this.textarea\n    const cursorPos = editor.selectionStart\n\n    document.execCommand('insertText', false, '\\t')\n    editor.selectionStart = editor.selectionEnd = cursorPos + 1\n  }\n  #indentSelectedText() {\n    const editor = this.textarea\n    const cursorPos = editor.selectionStart\n    const selectedText = this.#getSelectedText()\n    const lines = selectedText.split('\\n')\n    const indentedText = lines.map(line => '\\t' + line).join('\\n')\n\n    document.execCommand('insertText', false, indentedText)\n    editor.selectionStart = cursorPos\n  }\n  #unindentSelectedText() {\n    const editor = this.textarea\n    const cursorPos = editor.selectionStart\n    const selectedText = this.#getSelectedText()\n    const lines = selectedText.split('\\n')\n    const indentedText = lines.map(line => line.replace(/^\\t/, '').replace(/^ /, '')).join('\\n')\n\n    document.execCommand('insertText', false, indentedText)\n    editor.selectionStart = cursorPos\n  }\n  handleEnterKey() {\n    const editor = this.textarea\n    const visibleTop = editor.scrollTop\n    const cursorPosition = editor.selectionStart\n\n    let start = cursorPosition - 1\n    while (start >= 0 && editor.value[start] !== '\\n') {\n      start--\n    }\n\n    let newLine = ''\n    while (start < cursorPosition - 1 && (editor.value[start + 1] === ' ' || editor.value[start + 1] === '\\t')) {\n      newLine += editor.value[start + 1]\n      start++\n    }\n\n    document.execCommand('insertText', false, '\\n' + newLine)\n    editor.selectionStart = editor.selectionEnd = cursorPosition + 1 + newLine.length\n    editor.scrollTop = visibleTop /*// Prevent the editor from scrolling*/\n    const lineHeight = editor.scrollHeight / editor.value.split('\\n').length\n    const line = editor.value.substring(0, cursorPosition).split('\\n').length\n\n    // Do the actual layout calculation in order to get the correct scroll position\n    const visibleBottom = editor.scrollTop + editor.clientHeight\n    const lineTop = lineHeight * (line - 1)\n    const lineBottom = lineHeight * (line + 2)\n\n    // If the cursor is outside the visible range, scroll the editor\n    if (lineTop < visibleTop) editor.scrollTop = lineTop\n    if (lineBottom > visibleBottom) editor.scrollTop = lineBottom - editor.clientHeight\n  }\n}",
		"css" : "::-webkit-scrollbar {\n  width: 0.625rem;\n  height: 0.625rem;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #111;\n  border-radius: 0.3125rem;\n  box-shadow: inset 0.125rem 0.125rem 0.125rem rgba(255, 255, 255, 0.25),\n    inset -0.125rem -0.125rem 0.125rem rgba(0, 0, 0, 0.25);\n  cursor: default;\n}\n\n::-webkit-scrollbar-track {\n  background: #333;\n}\n\n::selection {\n  background: #fff;\n  color: #333;\n}\n\nhtml,\nbody {\n  height: 100vh;\n  height: 100dvh;\n  margin: 0;\n  overflow: hidden;\n}\n\nbody {\n  display: grid;\n  grid-template-rows: calc(100dvh - 4rem) 4rem;\n  font-family: system-ui, sans-serif;\n}\n\ncanvas,\n.editor,\n#controls {\n  grid-row: 1;\n  grid-column: 1;\n}\n\ncanvas {\n  --canvas-z-index: -1;\n  width: 100%;\n  height: auto;\n  object-fit: contain;\n  background: black;\n  touch-action: none;\n  z-index: var(--canvas-z-index);\n}\n\n.editor,\n.overlay,\n#error {\n  font-family: 'Courier New', Courier, monospace;\n  background: repeating-linear-gradient(0deg, #000a, #1119, #000a .25rem);\n  padding: 1em;\n}\n\n.editor {\n  color: #fefefe;\n  tab-size: 2;\n  border: none;\n  resize: none;\n}\n\n.editor:focus {\n  outline: none;\n}\n\n#error {\n  grid-row: 2;\n  grid-column: 1;\n  margin: 0;\n  padding-block: 0;\n  padding-top: .5em;\n  color: firebrick;\n  overflow: auto;\n  text-wrap: pretty;\n}\n\n#indicator {\n  visibility: hidden;\n  position: absolute;\n  top: calc(var(--top, 0px) - var(--scroll-top, 0px));\n  width: 0;\n  height: 0;\n  border-top: 10px solid transparent;\n  border-bottom: 10px solid transparent;\n  border-left: 10px solid firebrick;\n  transform: translateY(-25%);\n}\n\n.overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  margin: 0;\n}\n\n.editor,\n.overlay {\n  font-size: 1rem;\n  line-height: 1.2;\n  white-space: pre;\n}\n\n#controls {\n  position: fixed;\n  top: 1em;\n  right: 2em;\n}\n\n.controls {\n  position: relative;\n  display: flex;\n  gap: 1.5em;\n  padding: .5em 1.25em;\n  background: #1111;\n  border-radius: 4px;\n}\n\n.controls::before,\n.controls::after {\n  content: '';\n  position: absolute;\n  z-index: -1;\n  inset: 0;\n  transform: scale(.95);\n  border-radius: inherit;\n  opacity: 0;\n}\n\n.controls::before {\n  background: #aef;\n  animation: pulse 2s infinite;\n}\n\n.controls::after {\n  background: #fefefe66;\n  transition: transform 200ms ease-in-out;\n}\n\n.controls:hover::before,\n.controls:hover::after {\n  opacity: 1;\n}\n\n.controls:hover::before {\n  transform: scale(.98);\n  filter: blur(2px);\n}\n\n.controls:hover::after {\n  transform: scale(1.025, 1.1);\n}\n\n.controls:hover {\n  background: #111f;\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n\n  50% {\n    transform: scale(1.0125);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n.hidden {\n  display: none !important;\n}\n\n.opaque {\n  opacity: 1 !important;\n  background: #111 !important;\n}\n\ninput {\n  all: unset;\n  opacity: .2;\n  filter: saturate(0) invert(1);\n  cursor: pointer;\n  transition: opacity 200ms ease-in-out;\n  padding: .25em .5em;\n}\n\ninput:hover {\n  opacity: 1;\n}\n\n.icon {\n  text-align: center;\n  line-height: 1;\n}\n\n#btnToggleView {\n  width: 1.25em;\n}\n\n#btnToggleView::after {\n  content: 'üëÅ';\n}\n\n#btnToggleView:checked::after {\n  content: '‚úèÔ∏è';\n}\n\n#btnToggleResolution::after {\n  content: '1Ô∏è‚É£';\n}\n\n#btnToggleResolution:checked::after {\n  content: '2Ô∏è‚É£';\n}\n\n#btnReset::after {\n  content: '‚èÆÔ∏è';\n}",
		"html" : "<canvas id=\"canvas\"></canvas>\n<textarea id=\"codeEditor\" class=\"editor\" spellcheck=\"false\" autocorrect=\"off\" autocapitalize=\"off\" translate=\"no\" oninput=\"render()\"></textarea>\n<pre id=\"error\"></pre>\n<div id=\"indicator\"></div>\n<div id=\"controls\">\n  <div class=\"controls\">\n    <input id=\"btnToggleView\" class=\"icon\" type=\"checkbox\" name=\"toggleView\" onclick=\"toggleView()\">\n    <input id=\"btnToggleResolution\" class=\"icon\" type=\"checkbox\" name=\"toggleResolution\" onchange=\"toggleResolution()\">\n    <input id=\"btnReset\" class=\"icon\" type=\"checkbox\" name=\"reset\" onclick=\"reset()\">\n  </div>\n</div>\n<script type=\"x-shader/x-fragment\">#version 300 es\n/*********\n* made by Matthias Hurrle (@atzedent)\n*/\nprecision highp float;\nout vec4 O;\nuniform float time;\nuniform vec2 resolution;\nuniform vec2 move;\n#define FC gl_FragCoord.xy\n#define R resolution\n#define T time\n#define N normalize\n#define S smoothstep\n#define MN min(R.x,R.y)\n#define rot(a) mat2(cos((a)-vec4(0,11,33,0)))\n#define cmul(a,b) vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x)\n#define csqr(a) vec2(a.x*a.x-a.y*a.y,2.*a.x*a.y)\nfloat rnd(vec3 p) {\n\tp=fract(p*vec3(12.9898,78.233,156.34));\n\tp+=dot(p,p+34.56);\n\treturn fract(p.x*p.y*p.z);\n}\nfloat swirls(in vec3 p) {\n\tfloat d=.0;\n\tvec3 c=p;\n\tfor(float i=min(.0,time); i<11.; i++) {\n\t\tp=.7*abs(p)/dot(p,p)-.7;\n\t\tp.yz=csqr(p.yz);\n\t\tp=p.zxy;\n\t\td+=exp(-19.*abs(dot(p,c)));\n\t}\n\treturn d;\n}\nvec3 march(in vec3 p, vec3 rd) {\n\tfloat d=.2, t=.0, c=.0, k=mix(.9,1.,rnd(rd)),\n\tmaxd=length(p)-1.;\n\tvec3 col=vec3(0);\n\tfor(float i=min(.0,time); i<120.; i++) {\n\t\tt+=d*exp(-2.*c)*k;\n\t\tc=swirls(p+rd*t);\n\t\tif (t<5e-2 || t>maxd) break;\n\t\tcol+=c*8e-3;\n\t}\n\treturn col;\n}\nfloat rnd(vec2 p) {\n\tp=fract(p*vec2(12.9898,78.233));\n\tp+=dot(p,p+34.56);\n\treturn fract(p.x*p.y);\n}\nvec3 sky(vec2 p, bool anim) {\n\tp.x-=.17-(anim?2e-4*T:.0);\n\tp*=500.;\n\tvec2 id=floor(p), gv=fract(p)-.5;\n\tfloat n=rnd(id), d=length(gv);\n\tif (n<.975) return vec3(0);\n\treturn vec3(S(3e-2*n,1e-3*n,d*d));\n}\nvoid cam(inout vec3 p) {\n\tp.yz*=rot(move.y*6.3/MN-T*.05);\n\tp.xz*=rot(-move.x*6.3/MN+T*.025);\n}\nvoid main() {\n\tvec2 uv=(FC-.5*R)/MN;\n\tvec3 col=vec3(0),\n\tp=vec3(0,0,-16),\n\trd=N(vec3(uv,1)), rdd=rd;\n\tcam(p); cam(rd);\n\tcol=march(p,rd);\n\tvec2 sn=.5+vec2(atan(rdd.x,rdd.z),atan(length(rdd.xz),rdd.y))/6.28318;\n\tcol=max(col,vec3(sky(sn,true)+sky(2.+sn*2.,true)));\n\tfloat t=min((time-.5)*.3,1.);\n\tuv=FC/R*2.-1.;\n\tuv*=.7;\n\tfloat v=pow(dot(uv,uv),1.8);\n\tcol=mix(col,vec3(0),v);\n\tcol=mix(vec3(0),col,t);\n\tcol=max(col,.08);\n  O=vec4(col,1);\n}</script>",
		"created_at" : "2025-05-23 02:24:13",
		"updated_at" : "2025-05-23 02:24:13",
		"slug" : "66593",
		"photo" : "photos/682fdc4d7fd78.webp"
	}
]
