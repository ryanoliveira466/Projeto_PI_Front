01/05/2025
Cookies for more security with tokens

php artisan key:generate

>> php artisan config:clear
>> php artisan route:clear
>> php artisan cache:clear
>> php artisan view:clear


config/sanctum.
'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS','http://127.0.0.1:5501', sprintf(
        '%s%s',
        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
        Sanctum::currentApplicationUrlWithPort()
    ))),







config/cors.
'paths' => ['api/*', 'login', 'logout', 'sanctum/csrf-cookie'],

    'allowed_methods' => ['*'],

    'allowed_origins' => ['http://127.0.0.1:5501'], // Put your frontend's exact origin here

    'allowed_origins_patterns' => [],

    'allowed_headers' => ['*'],

    'exposed_headers' => [],

    'max_age' => 0,

    'supports_credentials' => true, //Must be true













web.
// Sanctum CSRF endpoint (always in web)
Route::get('/sanctum/csrf-cookie', function () {
    return response()->noContent();
});


//Cookies
Route::post('/login', [AuthController::class, 'login']);
Route::post('/logout', [AuthController::class, 'logout']);

















AuthController:
 public function login(Request $request)
    {



        //Trim is auto for email and name

        $email = (string) $request->input('email');
        $email = preg_replace('/\s+/', '', trim($email));
        if ($request->email !== $email) {
            return response()->json([
                'message' => 'Email must not contain spaces',
            ], 400);
        }

        $password = (string) $request->input('password');
        $password = preg_replace('/\s+/', '', trim($password));
        if ((string) $request->input('password') !== $password) {
            return response()->json([
                'message' => 'Password must not contain spaces',
            ], 400);
        }


        try {

            // Validate inputs
            $request->validate(
                [
                    'email' => 'required|email',
                    'password' => 'required',
                ],
                [
                    'email.required' => 'The email field is required',
                    'email.email' => 'The email must be a valid email address',
                    'password' => 'The password field is required',
                ]
            );

            if (!Auth::attempt($request->only('email', 'password'), $request->remember)) {
                return response()->json([
                    'success' => false,
                    'message' => 'Invalid login details',
                    'error' => 'Data do not match',
                ], 401);
            }

            $request->session()->regenerate();

            $user = Auth::user();

            return response()->json([
                'success' => true,
                'message' => 'Success while logging in',
                'user' => $user,
            ], 200);

     
        } catch (\Exception $error) {
            return response()->json([
                'success' => false,
                'message' => 'Error while logging in',
                'error' => $error->getMessage(),
            ], 500);
        }
    }



// -- //


public function logout(Request $request)
    {
        try {
            Auth::logout();
            $request->session()->invalidate();
            $request->session()->regenerateToken();

            return response()->json([
                'success' => true,
                'message' => 'Logged out successfully'
            ], 200);
        } catch (\Exception $error) {
            return response()->json([
                'success' => false,
                'message' => 'Error while logging out',
                'error' => $error->getMessage(),
            ], 500);
        }
    }








env.
SESSION_DRIVER=cookie
SANCTUM_STATEFUL_DOMAINS=127.0.0.1:5501
SESSION_DOMAIN=127.0.0.1


APP_URL=http://127.0.0.1:8000

APP_KEY=(Generated with the command in fisrt line)
















js
GET no need of X-XSRF-TOKEN
PUT, POST ,DELETE:
await fetch('http://127.0.0.1:8000/sanctum/csrf-cookie', {
          credentials: 'include'
        });
        const xsrf = decodeURIComponent(getCookie('XSRF-TOKEN'));

        try {
          const response = await fetch('http://127.0.0.1:8000/logout', {
            method: 'POST',
            credentials: 'include',
            headers: {
              'X-XSRF-TOKEN': xsrf,
              'Accept': 'application/json'
            }
          });